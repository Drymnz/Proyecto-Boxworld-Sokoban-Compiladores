/*************************************CODE******************************************************/
package com.cunoc.JFlex_Cup.Json;


import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

import com.cunoc.Server.Console;
    parser code {:
        private double contador= 0;
        private Symbol s;
        private int errorCounter= 0;

    SicJSon(LexicoJson lexico){
        super(lexico);
    }
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }
    public Symbol getSymbol(){
        return this.s;
    }
    public int getErrorCounter(){
        return this.errorCounter;
    }
:}
/*************************************TERMINALES******************************************************/
terminal NAME,ROWS,COLS;//for map
terminal COFIG,BOX_COLOR,BOX_ON_COLOR,TAGET_COLOR,BRICK_COLOR,HALL_COLOR,UNDEFINED_COLOR,PLAYER_COLOR;//color
terminal TYPE,BOARD,BOXES,TARGETS,PLAYER;//type box
terminal POSY,POSX;//poss
/****************NUMERICOS***********************/
terminal DOBLE_PUNTO,COMILLAS,COMA; /*PUNTUACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;/*SIMBOLOS DE OPERACION*/
terminal P_APERTURA,P_CIERRE,L_APERTURA,L_CIERRE,C_APERTURA,C_CIERRE;/*AGRUPACION*/
terminal HALL,BRICK;//pasio o ladrillo
terminal ALL,WORLDS,WORLD;
terminal String ENTERO,CARACTER,COLOR; /*DATOS*/
/*************************************NO TERMINALES******************************************************/
non terminal String o,j;/*para el uso de operaciones aritmeticas*/
non terminal inicio,accion;
non terminal crear_mundo,atributos;
non terminal color,bucle_color,seleccionar_color;
non terminal seleccion_poss,pos,pos_agrupar,atributos_poss,tipo_board;
non terminal typo_poss,solo_poss,varios_bloques;
non terminal entre_comillas_numero;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******INICIO DE TODO *****/
inicio ::= L_APERTURA accion L_CIERRE;

accion ::=
    WORLDS DOBLE_PUNTO ALL
    |WORLD DOBLE_PUNTO CARACTER
    |crear_mundo
    ;   
/*****************CREAR MUNDO*************************/
crear_mundo ::=
    crear_mundo COMA atributos
    |atributos
    ;

atributos ::=
    NAME DOBLE_PUNTO CARACTER
    |ROWS DOBLE_PUNTO entre_comillas_numero
    |COLS DOBLE_PUNTO entre_comillas_numero
    |COFIG DOBLE_PUNTO  L_APERTURA bucle_color L_CIERRE
    |BOARD DOBLE_PUNTO C_APERTURA seleccion_poss  C_CIERRE
    |TARGETS DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE
    |PLAYER DOBLE_PUNTO L_APERTURA solo_poss L_CIERRE
    |BOXES DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE
    ;
/*****************posicion*************************/
seleccion_poss ::= 
    seleccion_poss COMA pos_agrupar
    | pos_agrupar
    ;
pos_agrupar ::= L_APERTURA atributos_poss L_CIERRE ;

atributos_poss ::=
    atributos_poss COMA typo_poss
    |typo_poss
    ;
varios_bloques ::= 
    varios_bloques COMA L_APERTURA solo_poss L_CIERRE
    | L_APERTURA solo_poss L_CIERRE
    ;
solo_poss ::=
    solo_poss COMA pos
    |pos
    ;
pos ::=
    POSX DOBLE_PUNTO entre_comillas_numero
    |POSY DOBLE_PUNTO entre_comillas_numero
    ;
typo_poss ::= 
    pos
    |TYPE DOBLE_PUNTO  tipo_board
    ;
tipo_board ::=
    HALL
    |BRICK
    ;
entre_comillas_numero ::=
    COMILLAS j COMILLAS
    | j
    ;
/*****************color*************************/
bucle_color ::=
    bucle_color COMA seleccionar_color
    |seleccionar_color
    ;
seleccionar_color ::= color DOBLE_PUNTO  COLOR 
    ;
color ::=
    BOX_COLOR 
    |BOX_ON_COLOR 
    |TAGET_COLOR 
    |BRICK_COLOR 
    |HALL_COLOR 
    |UNDEFINED_COLOR 
    |PLAYER_COLOR 
    ;
/******operaciones matematicas*****/
j ::= o:a {:
    RESULT = a;
    double numeroUno= Double.valueOf(a);
    contador = (int) numeroUno;
           :} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
           | error
           {:
           :}
           ;
o ::= o:a SUMAR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno-numeroDos;
                    RESULT = String.valueOf(resultado);
                    :}

|  o:a RESTAR o:b {:
                double numeroUno= Double.valueOf(a);
                double numeroDos= Double.valueOf(b);
                double resultado = numeroUno-numeroDos;
                RESULT = String.valueOf(resultado);
                    :}

|  o:a DIVIDIR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno/numeroDos;
                    RESULT = String.valueOf(resultado);
                    :}

|  o:a MULTIPLICAR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno*numeroDos;
                    RESULT = String.valueOf(resultado);
                    :}

| P_APERTURA o:a {: RESULT = a; :} P_CIERRE
| ENTERO:a {: RESULT = a; :}
| RESTAR ENTERO:a {:
                    double numeroUno= Double.valueOf(a);
                    numeroUno = numeroUno*-1;
                    RESULT = String.valueOf(numeroUno);
 :}
;
