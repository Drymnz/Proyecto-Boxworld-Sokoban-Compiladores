
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Json;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.Server.Console;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SicJSon extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SicJSon() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SicJSon(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SicJSon(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\004\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\013" +
    "\005\000\002\013\003\000\002\015\005\000\002\016\005" +
    "\000\002\016\003\000\002\022\007\000\002\022\005\000" +
    "\002\021\005\000\002\021\003\000\002\014\005\000\002" +
    "\014\005\000\002\020\003\000\002\020\005\000\002\017" +
    "\003\000\002\017\003\000\002\023\005\000\002\023\003" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\003\003\000\002\003\003\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\024\002\000\002\002\006\000\002\002\003\000\002" +
    "\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\037\004\001\002\000\026\004\023\005" +
    "\021\006\014\007\012\020\011\021\007\022\022\023\017" +
    "\046\015\047\010\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\004\026\162\001\002\000\004" +
    "\026\160\001\002\000\004\026\135\001\002\000\004\026" +
    "\114\001\002\000\006\030\112\040\ufffd\001\002\000\004" +
    "\026\110\001\002\000\004\026\106\001\002\000\004\040" +
    "\105\001\002\000\004\026\101\001\002\000\006\030\ufffb" +
    "\040\ufffb\001\002\000\004\026\077\001\002\000\004\026" +
    "\026\001\002\000\004\026\024\001\002\000\004\051\025" +
    "\001\002\000\006\030\ufffa\040\ufffa\001\002\000\004\041" +
    "\027\001\002\000\004\037\031\001\002\000\006\030\072" +
    "\042\073\001\002\000\006\024\033\025\034\001\002\000" +
    "\006\030\067\040\070\001\002\000\004\026\065\001\002" +
    "\000\004\026\036\001\002\000\006\030\uffea\040\uffea\001" +
    "\002\000\014\003\042\027\044\032\043\035\037\050\046" +
    "\001\002\000\010\032\043\035\037\050\046\001\002\000" +
    "\006\030\uffe9\040\uffe9\001\002\000\006\030\uffe2\040\uffe2" +
    "\001\002\000\010\027\uffd6\030\uffd6\040\uffd6\001\002\000" +
    "\004\050\061\001\002\000\012\003\042\032\043\035\037" +
    "\050\046\001\002\000\020\027\uffd7\030\uffd7\031\051\032" +
    "\052\033\047\034\050\040\uffd7\001\002\000\022\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\040" +
    "\uffcf\001\002\000\010\032\043\035\037\050\046\001\002" +
    "\000\010\032\043\035\037\050\046\001\002\000\010\032" +
    "\043\035\037\050\046\001\002\000\010\032\043\035\037" +
    "\050\046\001\002\000\022\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\047\034\050\036\uffd4\040\uffd4\001\002\000\022" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\047\034\050\036" +
    "\uffd5\040\uffd5\001\002\000\022\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\036\uffd2\040\uffd2\001\002\000" +
    "\022\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\036\uffd3\040\uffd3\001\002\000\004\027\060\001\002\000" +
    "\006\030\uffe3\040\uffe3\001\002\000\022\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\036\uffce\040\uffce\001" +
    "\002\000\014\031\051\032\052\033\047\034\050\036\uffd1" +
    "\001\002\000\004\036\064\001\002\000\022\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0" +
    "\001\002\000\014\003\042\027\044\032\043\035\037\050" +
    "\046\001\002\000\006\030\uffe8\040\uffe8\001\002\000\006" +
    "\024\033\025\034\001\002\000\006\030\uffec\042\uffec\001" +
    "\002\000\006\030\uffeb\040\uffeb\001\002\000\004\037\074" +
    "\001\002\000\006\030\ufff5\040\ufff5\001\002\000\006\024" +
    "\033\025\034\001\002\000\006\030\067\040\076\001\002" +
    "\000\006\030\uffed\042\uffed\001\002\000\014\003\042\027" +
    "\044\032\043\035\037\050\046\001\002\000\006\030\ufff9" +
    "\040\ufff9\001\002\000\004\037\102\001\002\000\006\024" +
    "\033\025\034\001\002\000\006\030\067\040\104\001\002" +
    "\000\006\030\ufff4\040\ufff4\001\002\000\004\002\000\001" +
    "\002\000\004\045\107\001\002\000\004\040\uffff\001\002" +
    "\000\014\003\042\027\044\032\043\035\037\050\046\001" +
    "\002\000\006\030\ufff8\040\ufff8\001\002\000\022\004\023" +
    "\005\021\006\014\007\012\020\011\021\007\022\022\023" +
    "\017\001\002\000\006\030\ufffc\040\ufffc\001\002\000\004" +
    "\037\115\001\002\000\020\010\121\011\117\012\127\013" +
    "\125\014\124\015\126\016\123\001\002\000\006\030\132" +
    "\040\133\001\002\000\004\026\uffdd\001\002\000\006\030" +
    "\uffe0\040\uffe0\001\002\000\004\026\uffde\001\002\000\004" +
    "\026\130\001\002\000\004\026\uffd8\001\002\000\004\026" +
    "\uffda\001\002\000\004\026\uffdb\001\002\000\004\026\uffd9" +
    "\001\002\000\004\026\uffdc\001\002\000\004\052\131\001" +
    "\002\000\006\030\uffdf\040\uffdf\001\002\000\020\010\121" +
    "\011\117\012\127\013\125\014\124\015\126\016\123\001" +
    "\002\000\006\030\ufff7\040\ufff7\001\002\000\006\030\uffe1" +
    "\040\uffe1\001\002\000\004\041\136\001\002\000\004\037" +
    "\141\001\002\000\006\030\ufff1\042\ufff1\001\002\000\006" +
    "\030\155\042\156\001\002\000\010\017\145\024\033\025" +
    "\034\001\002\000\006\030\152\040\153\001\002\000\006" +
    "\030\uffee\040\uffee\001\002\000\006\030\uffe7\040\uffe7\001" +
    "\002\000\004\026\146\001\002\000\006\043\150\044\147" +
    "\001\002\000\006\030\uffe4\040\uffe4\001\002\000\006\030" +
    "\uffe5\040\uffe5\001\002\000\006\030\uffe6\040\uffe6\001\002" +
    "\000\010\017\145\024\033\025\034\001\002\000\006\030" +
    "\ufff0\042\ufff0\001\002\000\006\030\uffef\040\uffef\001\002" +
    "\000\004\037\141\001\002\000\006\030\ufff6\040\ufff6\001" +
    "\002\000\006\030\ufff2\042\ufff2\001\002\000\004\051\161" +
    "\001\002\000\004\040\ufffe\001\002\000\004\041\163\001" +
    "\002\000\004\037\031\001\002\000\006\030\072\042\165" +
    "\001\002\000\006\030\ufff3\040\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\004\004\001\001\000\010\005\015\006" +
    "\012\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\027\001\001\000\002\001\001\000\006\014\034" +
    "\021\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\044\003\040" +
    "\023\037\001\001\000\004\002\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\044\003\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\055\001\001\000\004\002\054" +
    "\001\001\000\004\002\053\001\001\000\004\002\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\044\003\040\023\065\001" +
    "\001\000\002\001\001\000\004\014\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\034\021\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\044\003\040\023\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\034" +
    "\021\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\044\003\040\023\110\001\001\000\002\001\001\000" +
    "\004\007\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\121\011\115\012\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\121\012\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\137\015\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\143\016\141\020\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\143\020" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\163\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SicJSon$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SicJSon$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SicJSon$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private double contador= 0;
        private Symbol s;
        private int errorCounter= 0;

    SicJSon(LexicoJson lexico){
        super(lexico);
    }
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }
    public Symbol getSymbol(){
        return this.s;
    }
    public int getErrorCounter(){
        return this.errorCounter;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SicJSon$actions {
  private final SicJSon parser;

  /** Constructor */
  CUP$SicJSon$actions(SicJSon parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SicJSon$do_action_part00000000(
    int                        CUP$SicJSon$act_num,
    java_cup.runtime.lr_parser CUP$SicJSon$parser,
    java.util.Stack            CUP$SicJSon$stack,
    int                        CUP$SicJSon$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SicJSon$result;

      /* select the action based on the action number */
      switch (CUP$SicJSon$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;
		RESULT = start_val;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SicJSon$parser.done_parsing();
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= L_APERTURA accion L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // accion ::= WORLDS DOBLE_PUNTO ALL 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // accion ::= WORLD DOBLE_PUNTO CARACTER 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // accion ::= crear_mundo 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // crear_mundo ::= crear_mundo COMA atributos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("crear_mundo",4, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // crear_mundo ::= atributos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("crear_mundo",4, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributos ::= NAME DOBLE_PUNTO CARACTER 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributos ::= ROWS DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributos ::= COLS DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributos ::= COFIG DOBLE_PUNTO L_APERTURA bucle_color L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributos ::= BOARD DOBLE_PUNTO C_APERTURA seleccion_poss C_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributos ::= TARGETS DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributos ::= PLAYER DOBLE_PUNTO L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributos ::= BOXES DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seleccion_poss ::= seleccion_poss COMA pos_agrupar 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccion_poss",9, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seleccion_poss ::= pos_agrupar 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccion_poss",9, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pos_agrupar ::= L_APERTURA atributos_poss L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos_agrupar",11, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributos_poss ::= atributos_poss COMA typo_poss 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos_poss",12, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributos_poss ::= typo_poss 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos_poss",12, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varios_bloques ::= varios_bloques COMA L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("varios_bloques",16, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varios_bloques ::= L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("varios_bloques",16, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // solo_poss ::= solo_poss COMA pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("solo_poss",15, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // solo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("solo_poss",15, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pos ::= POSX DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos",10, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pos ::= POSY DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos",10, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("typo_poss",14, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typo_poss ::= TYPE DOBLE_PUNTO tipo_board 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("typo_poss",14, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_board ::= HALL 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("tipo_board",13, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_board ::= BRICK 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("tipo_board",13, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // entre_comillas_numero ::= COMILLAS j COMILLAS 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("entre_comillas_numero",17, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // entre_comillas_numero ::= j 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("entre_comillas_numero",17, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bucle_color ::= bucle_color COMA seleccionar_color 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("bucle_color",7, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bucle_color ::= seleccionar_color 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("bucle_color",7, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seleccionar_color ::= color DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccionar_color",8, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // color ::= BOX_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // color ::= BOX_ON_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // color ::= TAGET_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // color ::= BRICK_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // color ::= HALL_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // color ::= UNDEFINED_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // color ::= PLAYER_COLOR 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // j ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
    RESULT = a;
    double numeroUno= Double.valueOf(a);
    contador = (int) numeroUno;
           
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("j",1, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // j ::= error 
            {
              String RESULT =null;
		
           
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("j",1, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // o ::= o SUMAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno-numeroDos;
                    RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // o ::= o RESTAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                double numeroUno= Double.valueOf(a);
                double numeroDos= Double.valueOf(b);
                double resultado = numeroUno-numeroDos;
                RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // o ::= o DIVIDIR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno/numeroDos;
                    RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // o ::= o MULTIPLICAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno*numeroDos;
                    RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
 RESULT = a; 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // o ::= P_APERTURA o NT$0 P_CIERRE 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		 RESULT = a; 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // o ::= RESTAR ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    numeroUno = numeroUno*-1;
                    RESULT = String.valueOf(numeroUno);
 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SicJSon$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SicJSon$do_action(
    int                        CUP$SicJSon$act_num,
    java_cup.runtime.lr_parser CUP$SicJSon$parser,
    java.util.Stack            CUP$SicJSon$stack,
    int                        CUP$SicJSon$top)
    throws java.lang.Exception
    {
              return CUP$SicJSon$do_action_part00000000(
                               CUP$SicJSon$act_num,
                               CUP$SicJSon$parser,
                               CUP$SicJSon$stack,
                               CUP$SicJSon$top);
    }
}

}
