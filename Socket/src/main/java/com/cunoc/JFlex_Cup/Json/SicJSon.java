
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Json;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.Map.ListSquare;
import com.cunoc.Map.Square;
import com.cunoc.Server.ListReactionServer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SicJSon extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SicJSon() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SicJSon(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SicJSon(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\004\005\000\002\004" +
    "\003\000\002\024\002\000\002\005\006\000\002\025\002" +
    "\000\002\005\006\000\002\026\002\000\002\005\004\000" +
    "\002\005\002\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\007\000\002\007\007\000\002\027\002\000\002\007\010" +
    "\000\002\030\002\000\002\007\010\000\002\031\002\000" +
    "\002\007\010\000\002\007\003\000\002\013\005\000\002" +
    "\013\003\000\002\013\003\000\002\015\005\000\002\016" +
    "\005\000\002\016\003\000\002\032\002\000\002\022\010" +
    "\000\002\022\005\000\002\021\005\000\002\021\003\000" +
    "\002\014\005\000\002\014\005\000\002\020\003\000\002" +
    "\020\005\000\002\033\002\000\002\017\004\000\002\034" +
    "\002\000\002\017\004\000\002\017\003\000\002\023\005" +
    "\000\002\023\003\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\003\003\000\002\003\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\035\002\000\002\002\006\000\002" +
    "\002\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\003\004\037\005\001\002\000\004\002" +
    "\uffff\001\002\000\032\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\040\ufff8\046" +
    "\ufffe\047\ufffc\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\024\003\032\004\035\005\034\006" +
    "\031\007\026\020\027\021\uffec\022\ufff0\023\uffee\001\002" +
    "\000\004\047\020\001\002\000\004\040\017\001\002\000" +
    "\004\046\014\001\002\000\004\026\015\001\002\000\004" +
    "\045\016\001\002\000\004\040\ufffd\001\002\000\004\002" +
    "\000\001\002\000\004\026\021\001\002\000\004\051\022" +
    "\001\002\000\004\040\ufffb\001\002\000\004\021\211\001" +
    "\002\000\004\023\204\001\002\000\004\022\164\001\002" +
    "\000\004\026\130\001\002\000\004\026\073\001\002\000" +
    "\006\030\071\040\ufff9\001\002\000\004\026\067\001\002" +
    "\000\006\030\uffea\040\uffea\001\002\000\006\030\ufff6\040" +
    "\ufff6\001\002\000\004\026\040\001\002\000\004\026\036" +
    "\001\002\000\004\051\037\001\002\000\006\030\ufff5\040" +
    "\ufff5\001\002\000\014\003\044\027\046\032\045\035\042" +
    "\050\050\001\002\000\006\030\ufff4\040\ufff4\001\002\000" +
    "\010\032\045\035\042\050\050\001\002\000\006\030\uffd4" +
    "\040\uffd4\001\002\000\010\027\uffc8\030\uffc8\040\uffc8\001" +
    "\002\000\004\050\063\001\002\000\012\003\044\032\045" +
    "\035\042\050\050\001\002\000\020\027\uffc9\030\uffc9\031" +
    "\053\032\054\033\051\034\052\040\uffc9\001\002\000\022" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036" +
    "\uffc1\040\uffc1\001\002\000\010\032\045\035\042\050\050" +
    "\001\002\000\010\032\045\035\042\050\050\001\002\000" +
    "\010\032\045\035\042\050\050\001\002\000\010\032\045" +
    "\035\042\050\050\001\002\000\022\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\051\034\052\036\uffc6\040\uffc6\001\002" +
    "\000\022\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\051\034" +
    "\052\036\uffc7\040\uffc7\001\002\000\022\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\001" +
    "\002\000\022\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\040\uffc5\001\002\000\004\027\062\001" +
    "\002\000\006\030\uffd5\040\uffd5\001\002\000\022\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\040" +
    "\uffc0\001\002\000\014\031\053\032\054\033\051\034\052" +
    "\036\uffc3\001\002\000\004\036\066\001\002\000\022\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\040\uffc2\001\002\000\014\003\044\027\046\032\045\035" +
    "\042\050\050\001\002\000\006\030\ufff3\040\ufff3\001\002" +
    "\000\024\003\032\004\035\005\034\006\031\007\026\020" +
    "\027\021\uffec\022\ufff0\023\uffee\001\002\000\006\030\ufff7" +
    "\040\ufff7\001\002\000\004\041\074\001\002\000\006\003" +
    "\076\037\100\001\002\000\006\030\uffe8\042\uffe8\001\002" +
    "\000\006\030\uffe7\042\uffe7\001\002\000\006\030\125\042" +
    "\126\001\002\000\010\017\106\024\101\025\102\001\002" +
    "\000\004\026\123\001\002\000\004\026\121\001\002\000" +
    "\006\030\uffe4\040\uffe4\001\002\000\006\030\116\040\117" +
    "\001\002\000\006\030\uffdc\040\uffdc\001\002\000\004\026" +
    "\107\001\002\000\010\003\110\043\uffda\044\uffd8\001\002" +
    "\000\006\030\uffd6\040\uffd6\001\002\000\004\044\115\001" +
    "\002\000\004\043\114\001\002\000\006\030\uffdb\040\uffdb" +
    "\001\002\000\006\030\uffd9\040\uffd9\001\002\000\006\030" +
    "\uffd7\040\uffd7\001\002\000\010\017\106\024\101\025\102" +
    "\001\002\000\006\030\uffe6\042\uffe6\001\002\000\006\030" +
    "\uffe5\040\uffe5\001\002\000\014\003\044\027\046\032\045" +
    "\035\042\050\050\001\002\000\006\030\uffde\040\uffde\001" +
    "\002\000\014\003\044\027\046\032\045\035\042\050\050" +
    "\001\002\000\006\030\uffdd\040\uffdd\001\002\000\004\037" +
    "\100\001\002\000\006\030\ufff1\040\ufff1\001\002\000\006" +
    "\030\uffe9\042\uffe9\001\002\000\004\037\131\001\002\000" +
    "\020\010\134\011\133\012\142\013\141\014\137\015\140" +
    "\016\136\001\002\000\006\030\161\040\162\001\002\000" +
    "\004\026\157\001\002\000\004\026\155\001\002\000\006" +
    "\030\uffd2\040\uffd2\001\002\000\004\026\153\001\002\000" +
    "\004\026\151\001\002\000\004\026\147\001\002\000\004" +
    "\026\145\001\002\000\004\026\143\001\002\000\004\052" +
    "\144\001\002\000\006\030\uffce\040\uffce\001\002\000\004" +
    "\052\146\001\002\000\006\030\uffcd\040\uffcd\001\002\000" +
    "\004\052\150\001\002\000\006\030\uffcb\040\uffcb\001\002" +
    "\000\004\052\152\001\002\000\006\030\uffcc\040\uffcc\001" +
    "\002\000\004\052\154\001\002\000\006\030\uffca\040\uffca" +
    "\001\002\000\004\052\156\001\002\000\006\030\uffd0\040" +
    "\uffd0\001\002\000\004\052\160\001\002\000\006\030\uffcf" +
    "\040\uffcf\001\002\000\020\010\134\011\133\012\142\013" +
    "\141\014\137\015\140\016\136\001\002\000\006\030\ufff2" +
    "\040\ufff2\001\002\000\006\030\uffd3\040\uffd3\001\002\000" +
    "\004\026\165\001\002\000\004\041\166\001\002\000\004" +
    "\037\170\001\002\000\006\030\uffe3\042\177\001\002\000" +
    "\006\024\101\025\102\001\002\000\006\030\173\040\174" +
    "\001\002\000\006\030\uffdf\040\uffdf\001\002\000\006\024" +
    "\101\025\102\001\002\000\006\030\uffe1\042\uffe1\001\002" +
    "\000\006\030\uffe0\040\uffe0\001\002\000\004\030\200\001" +
    "\002\000\006\030\uffef\040\uffef\001\002\000\004\037\201" +
    "\001\002\000\006\024\101\025\102\001\002\000\006\030" +
    "\173\040\203\001\002\000\006\030\uffe2\042\uffe2\001\002" +
    "\000\004\026\205\001\002\000\004\037\206\001\002\000" +
    "\006\024\101\025\102\001\002\000\006\030\173\040\210" +
    "\001\002\000\006\030\uffed\040\uffed\001\002\000\004\026" +
    "\212\001\002\000\004\041\213\001\002\000\004\037\170" +
    "\001\002\000\006\030\uffe3\042\215\001\002\000\006\030" +
    "\uffeb\040\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\004\005\001\001\000\002\001\001\000" +
    "\012\005\011\024\012\025\010\026\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\027\007\032\027" +
    "\024\030\023\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\046\003" +
    "\042\023\040\001\001\000\002\001\001\000\004\002\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\046\003\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\057\001\001\000\004\002" +
    "\056\001\001\000\004\002\055\001\001\000\004\002\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\046\003\042\023\067" +
    "\001\001\000\002\001\001\000\012\007\071\027\024\030" +
    "\023\031\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\076\015\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\104\016\103" +
    "\020\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\112\033\111\034\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\104\020\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\046\003\042\023\121\001\001\000\002\001" +
    "\001\000\010\002\046\003\042\023\123\001\001\000\002" +
    "\001\001\000\004\015\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\134\011\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\166\001\001\000\004\032\175\001\001\000\006" +
    "\014\171\021\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\171\021\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\171\021\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\213\001\001\000\004\032\175\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SicJSon$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SicJSon$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SicJSon$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private double contador= 0;
        private Symbol s;
        private int errorCounter= 0;
        //attributes for map
        private ListSquare typeSquare = ListSquare.UNDEFINED;
        private String name = null;
        private int rows = -1;
        private int cols = -1;
        private int possY = -1;
        private int possX = -1;
        //color
        private String BOX_COLOR = null;
        private String BOX_ON_COLOR = null;
        private String TARGET_COLOR = null;
        private String BRICK_COLOR = null;
        private String HALL_COLOR = null;
        private String UNDEFINED_COLOR = null;
        private String PLAY_COLOR = null;
        private ArrayList<Square> listSquare = new ArrayList();
        //ReactionServer
        private ListReactionServer reaction = ListReactionServer.ERROR;
        private ArrayList<ErroSic> listError   = new ArrayList();

    private void addError(ListError error){
      listError.add(new ErroSic((cur_token.left+1), (cur_token.right+1), sym.terminalNames[cur_token.sym], error));
    }

    public ArrayList<ErroSic> getListError(){
      return listError;
    }

    SicJSon(LexicoJson lexico){
        super(lexico);
    }
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        addError(ListError.EMPTY);
        System.out.println("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }
    public Symbol getSymbol(){
        return this.s;
    }
    public ListReactionServer getReaction(){
      return this.reaction;
    }
    public int getErrorCounter(){
        return this.errorCounter;
    }
     private void addSquare(){
        listSquare.add(new Square(typeSquare,possX,possY));
        //System.out.println(typeSquare.toString()+"possx"+possX+"possY"+possY);
    }
    private void prinFinal(){
        //System.out.println(typeSquare.toString()+"possx"+possX+"possY"+possY);
        System.out.println("contador : "+contador);
        System.out.println("errorCounter : "+errorCounter);
        System.out.println("typeSquare : "+typeSquare);
        System.out.println("name : "+name);
        System.out.println("rows : "+rows);
        System.out.println("cols : "+cols);
        System.out.println("possY : "+possY);
        System.out.println("possX : "+possX);
        System.out.println("BOX_COLOR : "+BOX_COLOR);
        System.out.println("BOX_ON_COLOR : "+BOX_ON_COLOR);
        System.out.println("TARGET_COLOR : "+TARGET_COLOR);
        System.out.println("BRICK_COLOR : "+BRICK_COLOR);
        System.out.println("HALL_COLOR : "+HALL_COLOR);
        System.out.println("UNDEFINED_COLOR : "+UNDEFINED_COLOR);
        System.out.println("PLAY_COLOR : "+PLAY_COLOR);
        System.out.println("listSquare : "+listSquare.size());
        for (int index = 0; index < listSquare.size(); index++) {
          System.out.println("Square #"+index+":"+listSquare.get(index).toString());
        }
    }
    
    /*GET*/
    
public ListSquare getTypeSquare() {
      return typeSquare;
    }

    public String getName() {
      return name;
    }

    public int getRows() {
      return rows;
    }

    public int getCols() {
      return cols;
    }

    public int getPossY() {
      return possY;
    }

    public int getPossX() {
      return possX;
    }

    public String getBOX_COLOR() {
      return BOX_COLOR;
    }

    public String getBOX_ON_COLOR() {
      return BOX_ON_COLOR;
    }

    public String getTARGET_COLOR() {
      return TARGET_COLOR;
    }

    public String getBRICK_COLOR() {
      return BRICK_COLOR;
    }

    public String getHALL_COLOR() {
      return HALL_COLOR;
    }

    public String getUNDEFINED_COLOR() {
      return UNDEFINED_COLOR;
    }

    public String getPLAY_COLOR() {
      return PLAY_COLOR;
    }

    public ArrayList<Square> getListSquare() {
      return listSquare;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SicJSon$actions {
  private final SicJSon parser;

  /** Constructor */
  CUP$SicJSon$actions(SicJSon parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SicJSon$do_action_part00000000(
    int                        CUP$SicJSon$act_num,
    java_cup.runtime.lr_parser CUP$SicJSon$parser,
    java.util.Stack            CUP$SicJSon$stack,
    int                        CUP$SicJSon$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SicJSon$result;

      /* select the action based on the action number */
      switch (CUP$SicJSon$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;
		RESULT = start_val;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SicJSon$parser.done_parsing();
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= L_APERTURA accion L_CIERRE 
            {
              Object RESULT =null;
		
//prinFinal();

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Object RESULT =null;
		addError(ListError.EMPTY);
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
reaction = ListReactionServer.ALL_WORDS;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // accion ::= NT$0 WORLDS DOBLE_PUNTO ALL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
reaction = ListReactionServer.WORD;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accion ::= NT$1 WORLD DOBLE_PUNTO CARACTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
    if (name == null) {
      name = a.replaceAll("\"", "");
    }else{
      System.out.println("ya tiene un nombre");
    }
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
reaction = ListReactionServer.ADD_WORD;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= NT$2 crear_mundo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion ::= 
            {
              Object RESULT =null;
		addError(ListError.EMPTY);
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // crear_mundo ::= crear_mundo COMA atributos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("crear_mundo",4, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // crear_mundo ::= atributos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("crear_mundo",4, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributos ::= NAME DOBLE_PUNTO CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
    if (name == null) {
      name = a.replaceAll("\"", "");
    }else{
      System.out.println("ya tiene un nombre");
    }
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributos ::= ROWS DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;
				
    if (rows==-1) {
      if (contador>0) {
        rows = (int) contador;
      } else {
        System.out.println("no puede ser menor a 0");
      }
    }else{
      System.out.println("rows no se puede usar dos veces");
    }
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributos ::= COLS DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;
				
    if (cols==-1) {
      if (contador>0) {
        cols = (int) contador;
      } else {
        System.out.println("no puede ser menor a 0");
      }
    }else{
      System.out.println("cols no se puede usar dos veces");
    }
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atributos ::= COFIG DOBLE_PUNTO L_APERTURA bucle_color L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atributos ::= BOARD DOBLE_PUNTO C_APERTURA seleccion_poss C_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.TARGET;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributos ::= NT$3 TARGETS DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.PLAY;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atributos ::= NT$4 PLAYER DOBLE_PUNTO L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)).value;
		addSquare();
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.BOX;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos ::= NT$5 BOXES DOBLE_PUNTO C_APERTURA varios_bloques C_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atributos ::= error 
            {
              Object RESULT =null;
		addError(ListError.INCORRECT_ATTRIBUTE);
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos",5, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seleccion_poss ::= seleccion_poss COMA pos_agrupar 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccion_poss",9, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seleccion_poss ::= pos_agrupar 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccion_poss",9, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seleccion_poss ::= error 
            {
              Object RESULT =null;
		addError(ListError.POSITION);
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccion_poss",9, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pos_agrupar ::= L_APERTURA atributos_poss L_CIERRE 
            {
              Object RESULT =null;
		addSquare();
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos_agrupar",11, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atributos_poss ::= atributos_poss COMA typo_poss 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos_poss",12, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atributos_poss ::= typo_poss 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("atributos_poss",12, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
addSquare();
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varios_bloques ::= varios_bloques NT$6 COMA L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-4)).value;
		addSquare();
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("varios_bloques",16, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-5)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varios_bloques ::= L_APERTURA solo_poss L_CIERRE 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("varios_bloques",16, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // solo_poss ::= solo_poss COMA pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("solo_poss",15, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // solo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("solo_poss",15, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pos ::= POSX DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;
		possX=(int) contador;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos",10, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pos ::= POSY DOBLE_PUNTO entre_comillas_numero 
            {
              Object RESULT =null;
		possY=(int) contador;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("pos",10, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("typo_poss",14, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typo_poss ::= TYPE DOBLE_PUNTO tipo_board 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("typo_poss",14, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.HALL;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_board ::= NT$7 HALL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("tipo_board",13, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.BRICK;
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_board ::= NT$8 BRICK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("tipo_board",13, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_board ::= error 
            {
              Object RESULT =null;
		addError(ListError.TYPO_BLOCK);
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("tipo_board",13, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // entre_comillas_numero ::= COMILLAS j COMILLAS 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("entre_comillas_numero",17, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // entre_comillas_numero ::= j 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("entre_comillas_numero",17, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bucle_color ::= bucle_color COMA color 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("bucle_color",7, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bucle_color ::= color 
            {
              Object RESULT =null;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("bucle_color",7, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seleccionar_color ::= color 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("seleccionar_color",8, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // color ::= BOX_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(BOX_COLOR==null){BOX_COLOR = a;}else{System.out.println("Ya esta seleccionado BOX_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // color ::= BOX_ON_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(BOX_ON_COLOR==null){BOX_ON_COLOR = a;}else{System.out.println("Ya esta seleccionado BOX_ON_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // color ::= TAGET_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(TARGET_COLOR==null){TARGET_COLOR = a;}else{System.out.println("Ya esta seleccionado TARGET_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // color ::= BRICK_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(BRICK_COLOR==null){BRICK_COLOR = a;}else{System.out.println("Ya esta seleccionado BRICK_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // color ::= HALL_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(HALL_COLOR==null){HALL_COLOR = a;}else{System.out.println("Ya esta seleccionado HALL_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // color ::= UNDEFINED_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(UNDEFINED_COLOR==null){UNDEFINED_COLOR = a;}else{System.out.println("Ya esta seleccionado UNDEFINED_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // color ::= PLAYER_COLOR DOBLE_PUNTO COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		if(PLAY_COLOR==null){PLAY_COLOR = a;}else{System.out.println("Ya esta seleccionado PLAY_COLOR");}
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("color",6, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // j ::= o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
    RESULT = a;
    double numeroUno= Double.valueOf(a);
    contador = (int) numeroUno;
           
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("j",1, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // j ::= error 
            {
              String RESULT =null;
		
           
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("j",1, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // o ::= o SUMAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno+numeroDos;
                    RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // o ::= o RESTAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                double numeroUno= Double.valueOf(a);
                double numeroDos= Double.valueOf(b);
                double resultado = numeroUno-numeroDos;
                RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // o ::= o DIVIDIR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    if(numeroDos != 0){
double resultado = numeroUno/numeroDos;
                    RESULT = String.valueOf(resultado);
                  
                    }else{
addError(ListError.INDETERMINATION);
RESULT = "0";
                    }
                    
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // o ::= o MULTIPLICAR o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno*numeroDos;
                    RESULT = String.valueOf(resultado);
                    
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$9 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
 RESULT = a; 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // o ::= P_APERTURA o NT$9 P_CIERRE 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-2)).value;

              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-3)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // o ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		 RESULT = a; 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // o ::= RESTAR ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicJSon$stack.peek()).value;
		
                    double numeroUno= Double.valueOf(a);
                    numeroUno = numeroUno*-1;
                    RESULT = String.valueOf(numeroUno);
 
              CUP$SicJSon$result = parser.getSymbolFactory().newSymbol("o",0, ((java_cup.runtime.Symbol)CUP$SicJSon$stack.elementAt(CUP$SicJSon$top-1)), ((java_cup.runtime.Symbol)CUP$SicJSon$stack.peek()), RESULT);
            }
          return CUP$SicJSon$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SicJSon$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SicJSon$do_action(
    int                        CUP$SicJSon$act_num,
    java_cup.runtime.lr_parser CUP$SicJSon$parser,
    java.util.Stack            CUP$SicJSon$stack,
    int                        CUP$SicJSon$top)
    throws java.lang.Exception
    {
              return CUP$SicJSon$do_action_part00000000(
                               CUP$SicJSon$act_num,
                               CUP$SicJSon$parser,
                               CUP$SicJSon$stack,
                               CUP$SicJSon$top);
    }
}

}
