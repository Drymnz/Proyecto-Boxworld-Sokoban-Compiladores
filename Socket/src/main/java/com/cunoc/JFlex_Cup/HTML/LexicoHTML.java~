// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexico.jflex

/*primer seccion: codigo java que se copiara arriba*/
package com.cunoc.JFlex_Cup.HTML;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.cunoc.JFlex_Cup.Token;
import com.cunoc.Server.Console;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicoHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\6\1\22\0\1\1\2\0\1\2\13\0\1\3"+
    "\12\4\2\0\1\5\1\0\1\6\1\7\1\0\1\10"+
    "\1\11\1\12\4\13\1\14\1\15\1\13\1\16\1\17"+
    "\5\13\1\20\5\13\1\21\1\22\1\13\4\0\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\13\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\13\1\43\1\44\1\45\1\46\1\13\1\47"+
    "\1\50\1\51\1\13\1\0\1\1\10\0\1\1\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\4\0\1\3\1\4\13\0"+
    "\3\5\1\4\1\0\1\3\12\0\1\3\15\0\2\5"+
    "\1\4\1\6\14\0\1\7\16\0\1\5\1\10\1\4"+
    "\36\0\1\11\1\4\25\0\1\12\2\0\1\13\1\0"+
    "\1\14\1\15\1\16\1\0\1\17\2\0\1\4\5\0"+
    "\1\20\2\0\1\21\1\0\1\22\1\23\1\24\1\0"+
    "\1\25\2\0\1\26\2\0\1\27\6\0\1\30\1\0"+
    "\1\4\1\31\2\0\1\32\6\0\1\33\4\0\1\34"+
    "\1\0\1\35\4\0\1\36\3\0\1\37\1\0\1\40"+
    "\4\0\1\41\6\0\1\42\7\0\1\43\17\0\1\44"+
    "\6\0\1\45\10\0\1\46\5\0\1\47\4\0\1\50"+
    "\4\0\1\51\4\0\1\52\1\53\2\0\1\54\1\55"+
    "\12\0\1\56\1\0\1\57\6\0\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\52\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u01ce\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\52"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\52\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0372\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u0372\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0"+
    "\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500"+
    "\0\u152a\0\u1554\0\u157e\0\52\0\u15a8\0\u15d2\0\52\0\u15fc"+
    "\0\52\0\52\0\52\0\u1626\0\52\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u041a\0\u17a0\0\u17ca"+
    "\0\u041a\0\u17f4\0\u041a\0\u041a\0\u041a\0\u181e\0\u041a\0\u1848"+
    "\0\u1872\0\52\0\u189c\0\u18c6\0\52\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\52\0\u19ec\0\52\0\u041a\0\u1a16"+
    "\0\u1a40\0\u041a\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c"+
    "\0\u041a\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\52\0\u1c0e\0\52"+
    "\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\52\0\u1ce0\0\u1d0a\0\u1d34"+
    "\0\u041a\0\u1d5e\0\u041a\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u041a"+
    "\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\52\0\u1f2c"+
    "\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u041a\0\u2052"+
    "\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2"+
    "\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e\0\52\0\u22c8"+
    "\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u041a\0\u23c4\0\u23ee"+
    "\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\52\0\u2514"+
    "\0\u253e\0\u2568\0\u2592\0\u25bc\0\u041a\0\u25e6\0\u2610\0\u263a"+
    "\0\u2664\0\52\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u041a\0\u2736"+
    "\0\u2760\0\u278a\0\u27b4\0\52\0\52\0\u27de\0\u2808\0\u041a"+
    "\0\u041a\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e"+
    "\0\u2958\0\u2982\0\u29ac\0\52\0\u29d6\0\u041a\0\u2a00\0\u2a2a"+
    "\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\52\0\u041a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\2\2\1\7"+
    "\1\10\2\7\1\11\35\7\1\2\1\12\51\2\1\3"+
    "\51\2\1\12\2\2\1\13\3\2\13\13\1\2\26\13"+
    "\1\2\1\12\2\2\1\5\46\2\1\12\1\2\1\14"+
    "\3\2\1\15\15\2\1\16\1\17\4\2\1\20\4\2"+
    "\1\21\1\2\1\22\1\23\1\2\1\24\1\25\1\26"+
    "\3\2\1\12\6\2\13\27\1\2\26\27\1\2\1\12"+
    "\6\2\10\27\1\30\2\27\1\2\26\27\1\2\1\12"+
    "\6\2\1\31\12\27\1\2\26\27\1\2\1\12\2\2"+
    "\1\32\3\2\13\32\1\2\26\32\1\33\1\34\1\33"+
    "\1\35\21\33\1\36\1\37\4\33\1\40\4\33\1\41"+
    "\1\33\1\42\1\43\1\33\1\44\1\45\1\46\2\33"+
    "\1\15\1\47\5\15\1\50\42\15\1\2\1\12\37\2"+
    "\1\51\1\2\1\52\7\2\1\12\37\2\1\53\11\2"+
    "\1\12\22\2\1\54\26\2\1\12\22\2\1\55\26\2"+
    "\1\12\34\2\1\56\2\2\1\57\11\2\1\12\37\2"+
    "\1\60\11\2\1\12\22\2\1\61\24\2\1\62\1\2"+
    "\1\12\36\2\1\63\12\2\1\12\37\2\1\64\11\2"+
    "\1\12\2\2\1\27\3\2\13\27\1\2\26\27\1\2"+
    "\1\12\2\2\1\27\3\2\5\27\1\65\5\27\1\2"+
    "\26\27\1\2\1\12\2\2\1\27\3\2\7\27\1\66"+
    "\3\27\1\2\26\27\1\2\1\12\2\2\1\67\3\2"+
    "\13\67\1\2\26\67\1\33\1\34\1\33\1\35\47\33"+
    "\1\34\1\33\1\35\2\33\1\70\44\33\1\34\1\33"+
    "\1\35\35\33\1\71\1\33\1\72\7\33\1\34\1\33"+
    "\1\35\35\33\1\73\11\33\1\34\1\33\1\35\20\33"+
    "\1\74\26\33\1\34\1\33\1\35\20\33\1\75\26\33"+
    "\1\34\1\33\1\35\32\33\1\76\2\33\1\77\11\33"+
    "\1\34\1\33\1\35\35\33\1\100\11\33\1\34\1\33"+
    "\1\35\20\33\1\101\24\33\1\102\1\33\1\34\1\33"+
    "\1\35\34\33\1\103\12\33\1\34\1\33\1\35\35\33"+
    "\1\104\10\33\1\15\1\47\4\15\1\105\1\50\42\15"+
    "\1\2\1\12\22\2\1\106\23\2\1\107\2\2\1\12"+
    "\32\2\1\110\16\2\1\12\34\2\1\111\1\2\1\112"+
    "\12\2\1\12\34\2\1\113\14\2\1\12\35\2\1\114"+
    "\13\2\1\12\22\2\1\115\26\2\1\12\42\2\1\116"+
    "\6\2\1\12\45\2\1\117\3\2\1\12\41\2\1\120"+
    "\7\2\1\12\40\2\1\121\10\2\1\12\25\2\1\122"+
    "\23\2\1\12\41\2\1\123\7\2\1\12\2\2\1\27"+
    "\3\2\2\27\1\124\10\27\1\2\26\27\1\2\1\12"+
    "\2\2\1\27\3\2\7\27\1\125\3\27\1\2\26\27"+
    "\1\2\1\12\2\2\1\126\3\2\13\126\1\2\26\126"+
    "\1\33\1\34\1\33\1\35\20\33\1\127\23\33\1\130"+
    "\2\33\1\34\1\33\1\35\30\33\1\131\16\33\1\34"+
    "\1\33\1\35\32\33\1\132\1\33\1\133\12\33\1\34"+
    "\1\33\1\35\32\33\1\134\14\33\1\34\1\33\1\35"+
    "\33\33\1\135\13\33\1\34\1\33\1\35\20\33\1\136"+
    "\26\33\1\34\1\33\1\35\40\33\1\137\6\33\1\34"+
    "\1\33\1\35\43\33\1\140\3\33\1\34\1\33\1\35"+
    "\37\33\1\141\7\33\1\34\1\33\1\35\36\33\1\142"+
    "\10\33\1\34\1\33\1\35\23\33\1\143\23\33\1\34"+
    "\1\33\1\35\37\33\1\144\6\33\1\2\1\12\41\2"+
    "\1\145\7\2\1\12\21\2\1\146\4\2\1\147\22\2"+
    "\1\12\24\2\1\150\24\2\1\12\42\2\1\151\6\2"+
    "\1\12\27\2\1\152\21\2\1\12\34\2\1\153\14\2"+
    "\1\12\26\2\1\154\22\2\1\12\47\2\1\155\1\2"+
    "\1\12\17\2\1\156\1\157\30\2\1\12\42\2\1\160"+
    "\6\2\1\12\30\2\1\161\20\2\1\12\26\2\1\162"+
    "\22\2\1\12\26\2\1\163\22\2\1\12\34\2\1\164"+
    "\14\2\1\12\2\2\1\27\3\2\6\27\1\165\4\27"+
    "\1\2\26\27\1\2\1\12\2\2\1\166\3\2\13\166"+
    "\1\2\26\166\1\33\1\34\1\33\1\35\37\33\1\167"+
    "\7\33\1\34\1\33\1\35\17\33\1\170\4\33\1\171"+
    "\22\33\1\34\1\33\1\35\22\33\1\172\24\33\1\34"+
    "\1\33\1\35\40\33\1\173\6\33\1\34\1\33\1\35"+
    "\25\33\1\174\21\33\1\34\1\33\1\35\32\33\1\175"+
    "\14\33\1\34\1\33\1\35\24\33\1\176\22\33\1\34"+
    "\1\33\1\35\45\33\1\177\1\33\1\34\1\33\1\35"+
    "\15\33\1\200\1\201\30\33\1\34\1\33\1\35\40\33"+
    "\1\202\6\33\1\34\1\33\1\35\26\33\1\203\20\33"+
    "\1\34\1\33\1\35\24\33\1\204\22\33\1\34\1\33"+
    "\1\35\24\33\1\205\22\33\1\34\1\33\1\35\32\33"+
    "\1\206\13\33\1\2\1\12\25\2\1\207\23\2\1\12"+
    "\24\2\1\210\12\2\1\211\11\2\1\12\42\2\1\212"+
    "\6\2\1\12\33\2\1\213\15\2\1\12\4\2\1\214"+
    "\44\2\1\12\32\2\1\215\16\2\1\12\21\2\1\216"+
    "\27\2\1\12\4\2\1\217\44\2\1\12\26\2\1\220"+
    "\22\2\1\12\4\2\1\221\44\2\1\12\4\2\1\222"+
    "\44\2\1\12\4\2\1\223\44\2\1\12\26\2\1\224"+
    "\22\2\1\12\4\2\1\225\44\2\1\12\27\2\1\226"+
    "\21\2\1\12\25\2\1\227\23\2\1\12\2\2\1\230"+
    "\3\2\13\230\1\2\26\230\1\33\1\34\1\33\1\35"+
    "\23\33\1\231\23\33\1\34\1\33\1\35\22\33\1\232"+
    "\12\33\1\233\11\33\1\34\1\33\1\35\40\33\1\234"+
    "\6\33\1\34\1\33\1\35\31\33\1\235\15\33\1\34"+
    "\1\33\1\35\2\33\1\236\44\33\1\34\1\33\1\35"+
    "\30\33\1\237\16\33\1\34\1\33\1\35\17\33\1\240"+
    "\27\33\1\34\1\33\1\35\2\33\1\241\44\33\1\34"+
    "\1\33\1\35\24\33\1\242\22\33\1\34\1\33\1\35"+
    "\2\33\1\243\44\33\1\34\1\33\1\35\2\33\1\244"+
    "\44\33\1\34\1\33\1\35\2\33\1\245\44\33\1\34"+
    "\1\33\1\35\24\33\1\246\22\33\1\34\1\33\1\35"+
    "\2\33\1\247\44\33\1\34\1\33\1\35\25\33\1\250"+
    "\21\33\1\34\1\33\1\35\23\33\1\251\22\33\1\2"+
    "\1\12\4\2\1\252\44\2\1\12\37\2\1\253\11\2"+
    "\1\12\36\2\1\254\12\2\1\12\4\2\1\255\44\2"+
    "\1\12\21\2\1\256\27\2\1\12\30\2\1\257\20\2"+
    "\1\12\24\2\1\260\24\2\1\12\41\2\1\261\7\2"+
    "\1\12\43\2\1\262\5\2\1\12\32\2\1\263\16\2"+
    "\1\12\4\2\1\264\35\2\1\265\6\2\1\12\2\2"+
    "\1\266\3\2\13\266\1\2\26\266\1\33\1\34\1\33"+
    "\1\35\2\33\1\267\44\33\1\34\1\33\1\35\35\33"+
    "\1\270\11\33\1\34\1\33\1\35\34\33\1\271\12\33"+
    "\1\34\1\33\1\35\2\33\1\272\44\33\1\34\1\33"+
    "\1\35\17\33\1\273\27\33\1\34\1\33\1\35\26\33"+
    "\1\274\20\33\1\34\1\33\1\35\22\33\1\275\24\33"+
    "\1\34\1\33\1\35\37\33\1\276\7\33\1\34\1\33"+
    "\1\35\41\33\1\277\5\33\1\34\1\33\1\35\30\33"+
    "\1\300\16\33\1\34\1\33\1\35\2\33\1\301\35\33"+
    "\1\302\5\33\1\2\1\12\34\2\1\303\14\2\1\12"+
    "\21\2\1\304\27\2\1\12\24\2\1\305\24\2\1\12"+
    "\4\2\1\306\44\2\1\12\37\2\1\307\11\2\1\12"+
    "\4\2\1\310\14\2\1\311\27\2\1\12\21\2\1\312"+
    "\20\2\1\313\6\2\1\12\36\2\1\314\12\2\1\12"+
    "\4\2\1\315\43\2\1\33\1\34\1\33\1\35\32\33"+
    "\1\316\14\33\1\34\1\33\1\35\17\33\1\317\27\33"+
    "\1\34\1\33\1\35\22\33\1\320\24\33\1\34\1\33"+
    "\1\35\2\33\1\321\44\33\1\34\1\33\1\35\35\33"+
    "\1\322\11\33\1\34\1\33\1\35\2\33\1\323\14\33"+
    "\1\324\27\33\1\34\1\33\1\35\17\33\1\325\20\33"+
    "\1\326\6\33\1\34\1\33\1\35\34\33\1\327\12\33"+
    "\1\34\1\33\1\35\2\33\1\330\43\33\1\2\1\12"+
    "\37\2\1\331\11\2\1\12\43\2\1\332\5\2\1\12"+
    "\37\2\1\333\11\2\1\12\34\2\1\334\14\2\1\12"+
    "\24\2\1\335\24\2\1\12\24\2\1\336\24\2\1\12"+
    "\4\2\1\337\44\2\1\12\26\2\1\340\21\2\1\33"+
    "\1\34\1\33\1\35\35\33\1\341\11\33\1\34\1\33"+
    "\1\35\41\33\1\342\5\33\1\34\1\33\1\35\35\33"+
    "\1\343\11\33\1\34\1\33\1\35\32\33\1\344\14\33"+
    "\1\34\1\33\1\35\22\33\1\345\24\33\1\34\1\33"+
    "\1\35\22\33\1\346\24\33\1\34\1\33\1\35\2\33"+
    "\1\347\44\33\1\34\1\33\1\35\24\33\1\350\21\33"+
    "\1\2\1\12\41\2\1\351\7\2\1\12\22\2\1\352"+
    "\26\2\1\12\34\2\1\353\14\2\1\12\37\2\1\354"+
    "\11\2\1\12\37\2\1\355\11\2\1\12\37\2\1\356"+
    "\11\2\1\12\25\2\1\357\22\2\1\33\1\34\1\33"+
    "\1\35\37\33\1\360\7\33\1\34\1\33\1\35\20\33"+
    "\1\361\26\33\1\34\1\33\1\35\32\33\1\362\14\33"+
    "\1\34\1\33\1\35\35\33\1\363\11\33\1\34\1\33"+
    "\1\35\35\33\1\364\11\33\1\34\1\33\1\35\35\33"+
    "\1\365\11\33\1\34\1\33\1\35\23\33\1\366\22\33"+
    "\1\2\1\12\4\2\1\367\44\2\1\12\41\2\1\370"+
    "\7\2\1\12\37\2\1\371\11\2\1\12\41\2\1\372"+
    "\7\2\1\12\34\2\1\373\14\2\1\12\34\2\1\374"+
    "\14\2\1\12\21\2\1\375\26\2\1\33\1\34\1\33"+
    "\1\35\2\33\1\376\44\33\1\34\1\33\1\35\37\33"+
    "\1\377\7\33\1\34\1\33\1\35\35\33\1\u0100\11\33"+
    "\1\34\1\33\1\35\37\33\1\u0101\7\33\1\34\1\33"+
    "\1\35\32\33\1\u0102\14\33\1\34\1\33\1\35\32\33"+
    "\1\u0103\14\33\1\34\1\33\1\35\17\33\1\u0104\26\33"+
    "\1\2\1\12\30\2\1\u0105\20\2\1\12\41\2\1\u0106"+
    "\7\2\1\12\4\2\1\u0107\44\2\1\12\37\2\1\u0108"+
    "\11\2\1\12\37\2\1\u0109\11\2\1\12\24\2\1\u010a"+
    "\23\2\1\33\1\34\1\33\1\35\26\33\1\u010b\20\33"+
    "\1\34\1\33\1\35\37\33\1\u010c\7\33\1\34\1\33"+
    "\1\35\2\33\1\u010d\44\33\1\34\1\33\1\35\35\33"+
    "\1\u010e\11\33\1\34\1\33\1\35\35\33\1\u010f\11\33"+
    "\1\34\1\33\1\35\22\33\1\u0110\23\33\1\2\1\12"+
    "\26\2\1\u0111\22\2\1\12\4\2\1\u0112\44\2\1\12"+
    "\41\2\1\u0113\7\2\1\12\41\2\1\u0114\7\2\1\12"+
    "\37\2\1\u0115\10\2\1\33\1\34\1\33\1\35\24\33"+
    "\1\u0116\22\33\1\34\1\33\1\35\2\33\1\u0117\44\33"+
    "\1\34\1\33\1\35\37\33\1\u0118\7\33\1\34\1\33"+
    "\1\35\37\33\1\u0119\7\33\1\34\1\33\1\35\35\33"+
    "\1\u011a\10\33\1\2\1\12\43\2\1\u011b\5\2\1\12"+
    "\4\2\1\u011c\44\2\1\12\4\2\1\u011d\44\2\1\12"+
    "\34\2\1\u011e\13\2\1\33\1\34\1\33\1\35\41\33"+
    "\1\u011f\5\33\1\34\1\33\1\35\2\33\1\u0120\44\33"+
    "\1\34\1\33\1\35\2\33\1\u0121\44\33\1\34\1\33"+
    "\1\35\32\33\1\u0122\13\33\1\2\1\12\21\2\1\u0123"+
    "\27\2\1\12\37\2\1\u0124\10\2\1\33\1\34\1\33"+
    "\1\35\17\33\1\u0125\27\33\1\34\1\33\1\35\35\33"+
    "\1\u0126\10\33\1\2\1\12\24\2\1\u0127\24\2\1\12"+
    "\41\2\1\u0128\6\2\1\33\1\34\1\33\1\35\22\33"+
    "\1\u0129\24\33\1\34\1\33\1\35\37\33\1\u012a\6\33"+
    "\1\2\1\12\37\2\1\u012b\11\2\1\12\4\2\1\u012c"+
    "\43\2\1\33\1\34\1\33\1\35\35\33\1\u012d\11\33"+
    "\1\34\1\33\1\35\2\33\1\u012e\43\33\1\2\1\12"+
    "\34\2\1\u012f\13\2\1\33\1\34\1\33\1\35\32\33"+
    "\1\u0130\13\33\1\2\1\12\37\2\1\u0131\10\2\1\33"+
    "\1\34\1\33\1\35\35\33\1\u0132\10\33\1\2\1\12"+
    "\41\2\1\u0133\6\2\1\33\1\34\1\33\1\35\37\33"+
    "\1\u0134\6\33\1\2\1\12\4\2\1\u0135\43\2\1\33"+
    "\1\34\1\33\1\35\2\33\1\u0136\43\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\1\1\4\0\2\1\13\0\4\1"+
    "\1\0\1\1\12\0\1\1\15\0\4\1\14\0\1\1"+
    "\16\0\3\1\36\0\2\1\25\0\1\1\2\0\1\1"+
    "\1\0\3\1\1\0\1\1\2\0\1\1\5\0\1\1"+
    "\2\0\1\1\1\0\3\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\6\0\1\1\1\0\2\1\2\0\1\1"+
    "\6\0\1\1\4\0\1\1\1\0\1\1\4\0\1\1"+
    "\3\0\1\1\1\0\1\1\4\0\1\1\6\0\1\1"+
    "\7\0\1\1\17\0\1\1\6\0\1\1\10\0\1\1"+
    "\5\0\1\1\4\0\1\1\4\0\1\1\4\0\2\1"+
    "\2\0\2\1\12\0\1\1\1\0\1\1\6\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private String report = "";

    private void print(String token){
        report+="\n<linea:"+(yyline+1)+"><colum:"+(yycolumn+1)+"><TOKEN:"+yytext()+">";
        System.out.println(token);
    }
    public String getReport(){
        return this.report;
    }
    public void setReport(String repor){
        this.report = repor;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ESPACIOS*/
            }
            // fall through
          case 50: break;
          case 2:
            { print("{ENTERO}" );return new Symbol(sym.ENTERO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 51: break;
          case 3:
            { print("ERROR");
            }
            // fall through
          case 52: break;
          case 4:
            { print("COLOR" );return new Symbol(sym.COLOR,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 53: break;
          case 5:
            { print("{ID}" );return new Symbol(sym.CARACTER,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 54: break;
          case 6:
            { /*COMENTARIO*/
            }
            // fall through
          case 55: break;
          case 7:
            { /*INDICACIONES TECNICAS*/
            }
            // fall through
          case 56: break;
          case 8:
            { print("HALL"  );return new Symbol(sym.HALL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 57: break;
          case 9:
            { print("BRICK"  );return new Symbol(sym.BRICK,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 58: break;
          case 10:
            { print("cols"    );return new Symbol(sym.INICIO_COLS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 59: break;
          case 11:
            { print("name"    );return new Symbol(sym.INICIO_NAME ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 60: break;
          case 12:
            { print("posX"    );return new Symbol(sym.INICIO_POSX ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 61: break;
          case 13:
            { print("posY"    );return new Symbol(sym.INICIO_POSY ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 62: break;
          case 14:
            { print("rows"    );return new Symbol(sym.INICIO_ROWS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 63: break;
          case 15:
            { print("type"    );return new Symbol(sym.INICIO_TYPE ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 64: break;
          case 16:
            { print("FINAL_cols"     );return new Symbol(sym.FINAL_COLS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 65: break;
          case 17:
            { print("FINAL_name"     );return new Symbol(sym.FINAL_NAME  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 66: break;
          case 18:
            { print("FINAL_posX"     );return new Symbol(sym.FINAL_POSX  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 67: break;
          case 19:
            { print("FINAL_posY"     );return new Symbol(sym.FINAL_POSY  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 68: break;
          case 20:
            { print("FINAL_rows"     );return new Symbol(sym.FINAL_ROWS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 69: break;
          case 21:
            { print("FINAL_type"     );return new Symbol(sym.FINAL_TYPE  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 70: break;
          case 22:
            { print("board"    );return new Symbol(sym.INICIO_BOARD ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 71: break;
          case 23:
            { print("boxes"    );return new Symbol(sym.INICIO_BOXES ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 72: break;
          case 24:
            { print("world"    );return new Symbol(sym.INICIO_WORLD ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 73: break;
          case 25:
            { print("FINAL_board"     );return new Symbol(sym.FINAL_BOARD  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 74: break;
          case 26:
            { print("FINAL_boxes"     );return new Symbol(sym.FINAL_BOXES  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 75: break;
          case 27:
            { print("FINAL_world"     );return new Symbol(sym.FINAL_WORLD  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 76: break;
          case 28:
            { print("config"    );return new Symbol(sym.INICIO_CONFIG ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 77: break;
          case 29:
            { print("player"    );return new Symbol(sym.INICIO_PLAYER ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 78: break;
          case 30:
            { print("worlds"    );return new Symbol(sym.INICIO_WORLDS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 79: break;
          case 31:
            { print("FINAL_config"     );return new Symbol(sym.FINAL_CONFIG  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 80: break;
          case 32:
            { print("FINAL_player"     );return new Symbol(sym.FINAL_PLAYER  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 81: break;
          case 33:
            { print("FINAL_worlds"     );return new Symbol(sym.FINAL_WORLDS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 82: break;
          case 34:
            { print("targets"    );return new Symbol(sym.INICIO_TARGETS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 83: break;
          case 35:
            { print("FINAL_targets"     );return new Symbol(sym.FINAL_TARGETS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 84: break;
          case 36:
            { print("box_color"    );return new Symbol(sym.INICIO_BOX_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 85: break;
          case 37:
            { print("FINAL_box_color"     );return new Symbol(sym.FINAL_BOX_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 86: break;
          case 38:
            { print("hall_color"    );return new Symbol(sym.INICIO_HALL_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 87: break;
          case 39:
            { print("FINAL_hall_color"     );return new Symbol(sym.FINAL_HALL_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 88: break;
          case 40:
            { print("brick_color"    );return new Symbol(sym.INICIO_BRICK_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 89: break;
          case 41:
            { print("FINAL_brick_color"     );return new Symbol(sym.FINAL_BRICK_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 90: break;
          case 42:
            { print("player_color"    );return new Symbol(sym.INICIO_PLAYER_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 91: break;
          case 43:
            { print("target_color"    );return new Symbol(sym.INICIO_TARGET_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 92: break;
          case 44:
            { print("FINAL_player_color"     );return new Symbol(sym.FINAL_PLAYER_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 93: break;
          case 45:
            { print("FINAL_target_color"     );return new Symbol(sym.FINAL_TARGET_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 94: break;
          case 46:
            { print("undefined_color"    );return new Symbol(sym.INICIO_UNDEFINED_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 95: break;
          case 47:
            { print("FINAL_undefined_color"     );return new Symbol(sym.FINAL_UNDEFINED_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 96: break;
          case 48:
            { print("box_on_target_color"    );return new Symbol(sym.INICIO_BOX_COLOR_ON ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 97: break;
          case 49:
            { print("FINAL_box_on_target_color"     );return new Symbol(sym.FINAL_BOX_COLOR_ON  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
