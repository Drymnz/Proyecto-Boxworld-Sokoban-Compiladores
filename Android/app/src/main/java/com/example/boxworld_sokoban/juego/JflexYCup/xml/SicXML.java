
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.boxworld_sokoban.juego.JflexYCup.xml;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.example.boxworld_sokoban.juego.JflexYCup.xml.Map.ListSquare;
import com.example.boxworld_sokoban.juego.JflexYCup.xml.Map.Square;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SicXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SicXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SicXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SicXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\003\000\002\020" +
    "\002\000\002\015\006\000\002\021\002\000\002\015\006" +
    "\000\002\015\003\000\002\016\005\000\002\016\003\000" +
    "\002\017\002\000\002\022\002\000\002\003\007\000\002" +
    "\003\003\000\002\004\004\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\023\002\000\002\005\006\000" +
    "\002\024\002\000\002\005\006\000\002\025\002\000\002" +
    "\005\006\000\002\005\003\000\002\014\004\000\002\014" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\012\004\000\002\012\003\000\002\013\003\000" +
    "\002\013\005\000\002\026\002\000\002\011\004\000\002" +
    "\027\002\000\002\011\004\000\002\011\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\003\007\004\uffff\054\ufffd\001\002\000" +
    "\004\002\000\001\002\000\004\054\135\001\002\000\004" +
    "\004\012\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\011\001\002\000\004\002\001\001\002\000\006\003\015" +
    "\006\013\001\002\000\024\003\024\010\031\012\026\014" +
    "\023\016\025\020\022\022\uffe9\024\uffed\026\uffeb\001\002" +
    "\000\004\005\016\001\002\000\004\005\ufff5\001\002\000" +
    "\004\002\ufffe\001\002\000\004\022\132\001\002\000\004" +
    "\026\127\001\002\000\004\024\122\001\002\000\012\003" +
    "\076\030\104\032\102\052\077\001\002\000\004\062\074" +
    "\001\002\000\026\003\uffe7\007\uffe7\010\uffe7\012\uffe7\014" +
    "\uffe7\016\uffe7\020\uffe7\022\uffe7\024\uffe7\026\uffe7\001\002" +
    "\000\022\003\052\034\045\036\044\040\053\042\051\044" +
    "\047\046\050\050\042\001\002\000\004\062\040\001\002" +
    "\000\026\003\024\007\034\010\031\012\026\014\023\016" +
    "\025\020\022\022\uffe9\024\uffed\026\uffeb\001\002\000\026" +
    "\003\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3\016\ufff3\020" +
    "\ufff3\022\ufff3\024\ufff3\026\ufff3\001\002\000\004\063\032" +
    "\001\002\000\004\011\033\001\002\000\026\003\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2\022\ufff2" +
    "\024\ufff2\026\ufff2\001\002\000\006\003\ufff7\006\ufff7\001" +
    "\002\000\026\003\ufff4\007\ufff4\010\ufff4\012\ufff4\014\ufff4" +
    "\016\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4\001\002\000" +
    "\006\003\015\006\013\001\002\000\004\005\ufff6\001\002" +
    "\000\004\013\041\001\002\000\026\003\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\014\ufff1\016\ufff1\020\ufff1\022\ufff1\024\ufff1" +
    "\026\ufff1\001\002\000\004\064\072\001\002\000\024\003" +
    "\052\017\070\034\045\036\044\040\053\042\051\044\047" +
    "\046\050\050\042\001\002\000\004\064\066\001\002\000" +
    "\004\064\064\001\002\000\024\003\uffd7\017\uffd7\034\uffd7" +
    "\036\uffd7\040\uffd7\042\uffd7\044\uffd7\046\uffd7\050\uffd7\001" +
    "\002\000\004\064\062\001\002\000\004\064\060\001\002" +
    "\000\004\064\056\001\002\000\024\003\uffcf\017\uffcf\034" +
    "\uffcf\036\uffcf\040\uffcf\042\uffcf\044\uffcf\046\uffcf\050\uffcf" +
    "\001\002\000\004\064\054\001\002\000\004\041\055\001" +
    "\002\000\024\003\uffd4\017\uffd4\034\uffd4\036\uffd4\040\uffd4" +
    "\042\uffd4\044\uffd4\046\uffd4\050\uffd4\001\002\000\004\043" +
    "\057\001\002\000\024\003\uffd3\017\uffd3\034\uffd3\036\uffd3" +
    "\040\uffd3\042\uffd3\044\uffd3\046\uffd3\050\uffd3\001\002\000" +
    "\004\047\061\001\002\000\024\003\uffd1\017\uffd1\034\uffd1" +
    "\036\uffd1\040\uffd1\042\uffd1\044\uffd1\046\uffd1\050\uffd1\001" +
    "\002\000\004\045\063\001\002\000\024\003\uffd2\017\uffd2" +
    "\034\uffd2\036\uffd2\040\uffd2\042\uffd2\044\uffd2\046\uffd2\050" +
    "\uffd2\001\002\000\004\035\065\001\002\000\024\003\uffd6" +
    "\017\uffd6\034\uffd6\036\uffd6\040\uffd6\042\uffd6\044\uffd6\046" +
    "\uffd6\050\uffd6\001\002\000\004\037\067\001\002\000\024" +
    "\003\uffd5\017\uffd5\034\uffd5\036\uffd5\040\uffd5\042\uffd5\044" +
    "\uffd5\046\uffd5\050\uffd5\001\002\000\026\003\uffef\007\uffef" +
    "\010\uffef\012\uffef\014\uffef\016\uffef\020\uffef\022\uffef\024" +
    "\uffef\026\uffef\001\002\000\024\003\uffd8\017\uffd8\034\uffd8" +
    "\036\uffd8\040\uffd8\042\uffd8\044\uffd8\046\uffd8\050\uffd8\001" +
    "\002\000\004\051\073\001\002\000\024\003\uffd0\017\uffd0" +
    "\034\uffd0\036\uffd0\040\uffd0\042\uffd0\044\uffd0\046\uffd0\050" +
    "\uffd0\001\002\000\004\015\075\001\002\000\026\003\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\001\002\000\022\003\uffe2\021\uffe2" +
    "\023\uffe2\025\uffe2\027\uffe2\030\uffe2\032\uffe2\052\uffe2\001" +
    "\002\000\010\003\113\060\uffdb\061\uffdd\001\002\000\014" +
    "\003\076\021\111\030\104\032\102\052\077\001\002\000" +
    "\014\003\uffe0\021\uffe0\030\uffe0\032\uffe0\052\uffe0\001\002" +
    "\000\004\062\107\001\002\000\014\003\uffdf\021\uffdf\030" +
    "\uffdf\032\uffdf\052\uffdf\001\002\000\004\062\105\001\002" +
    "\000\004\031\106\001\002\000\022\003\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\032\uffe4\052\uffe4\001\002" +
    "\000\004\033\110\001\002\000\022\003\uffe3\021\uffe3\023" +
    "\uffe3\025\uffe3\027\uffe3\030\uffe3\032\uffe3\052\uffe3\001\002" +
    "\000\026\003\uffee\007\uffee\010\uffee\012\uffee\014\uffee\016" +
    "\uffee\020\uffee\022\uffee\024\uffee\026\uffee\001\002\000\014" +
    "\003\uffe1\021\uffe1\030\uffe1\032\uffe1\052\uffe1\001\002\000" +
    "\004\053\uffd9\001\002\000\004\060\121\001\002\000\004" +
    "\061\120\001\002\000\004\053\117\001\002\000\014\003" +
    "\uffde\021\uffde\030\uffde\032\uffde\052\uffde\001\002\000\004" +
    "\053\uffdc\001\002\000\004\053\uffda\001\002\000\010\003" +
    "\076\030\104\032\102\001\002\000\012\003\076\025\125" +
    "\030\104\032\102\001\002\000\016\003\uffe5\023\uffe5\025" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\001\002\000\026\003\uffec" +
    "\007\uffec\010\uffec\012\uffec\014\uffec\016\uffec\020\uffec\022" +
    "\uffec\024\uffec\026\uffec\001\002\000\016\003\uffe6\023\uffe6" +
    "\025\uffe6\027\uffe6\030\uffe6\032\uffe6\001\002\000\010\003" +
    "\076\030\104\032\102\001\002\000\012\003\076\027\131" +
    "\030\104\032\102\001\002\000\026\003\uffea\007\uffea\010" +
    "\uffea\012\uffea\014\uffea\016\uffea\020\uffea\022\uffea\024\uffea" +
    "\026\uffea\001\002\000\010\003\076\030\104\032\102\001" +
    "\002\000\012\003\076\023\134\030\104\032\102\001\002" +
    "\000\026\003\uffe8\007\uffe8\010\uffe8\012\uffe8\014\uffe8\016" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\026\uffe8\001\002\000\006" +
    "\003\136\056\140\001\002\000\004\055\ufff9\001\002\000" +
    "\004\055\143\001\002\000\004\057\ufff8\001\002\000\004" +
    "\057\142\001\002\000\004\055\ufffa\001\002\000\004\002" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\012\002\007\015\003\020\005\021\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\013\001\001\000\014\004\026\005\027\023\020" +
    "\024\017\025\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\102\012\077\013\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\045" +
    "\007\042\001\001\000\002\001\001\000\012\005\034\023" +
    "\020\024\017\025\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\035\001\001\000\002\001\001\000\004\003\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\115\026\114\027\113\001\001\000\006\010" +
    "\102\013\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\123\014" +
    "\122\001\001\000\004\010\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\123\014" +
    "\127\001\001\000\004\010\125\001\001\000\002\001\001" +
    "\000\006\010\123\014\132\001\001\000\004\010\125\001" +
    "\001\000\002\001\001\000\004\016\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SicXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SicXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SicXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private double contador= 0;
        private Symbol s;
        private int errorCounter= 0;
        //attributes for map
        private ListSquare typeSquare = ListSquare.UNDEFINED;
        private String name = null;
        private int rows = -1;
        private int cols = -1;
        private int possY = -1;
        private int possX = -1;
        //color
        private String BOX_COLOR = null;
        private String BOX_ON_COLOR = null;
        private String TARGET_COLOR = null;
        private String BRICK_COLOR = null;
        private String HALL_COLOR = null;
        private String UNDEFINED_COLOR = null;
        private String PLAY_COLOR = null;
        private ArrayList<Square> listSquare = new ArrayList();
        private boolean map = false ;

    SicXML(LexicoXML lexico){
        super(lexico);
    }
     public boolean isMap() {
            return this.map;
        }
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }
     private void addSquare(){
        listSquare.add(new Square(typeSquare,possX,possY));
        //System.out.println(typeSquare.toString()+"possx"+possX+"possY"+possY);
    }
    private void prinFinal(){
        //System.out.println(typeSquare.toString()+"possx"+possX+"possY"+possY);
        System.out.println("contador : "+contador);
        System.out.println("errorCounter : "+errorCounter);
        System.out.println("typeSquare : "+typeSquare);
        System.out.println("name : "+name);
        System.out.println("rows : "+rows);
        System.out.println("cols : "+cols);
        System.out.println("possY : "+possY);
        System.out.println("possX : "+possX);
        System.out.println("BOX_COLOR : "+BOX_COLOR);
        System.out.println("BOX_ON_COLOR : "+BOX_ON_COLOR);
        System.out.println("TARGET_COLOR : "+TARGET_COLOR);
        System.out.println("BRICK_COLOR : "+BRICK_COLOR);
        System.out.println("HALL_COLOR : "+HALL_COLOR);
        System.out.println("UNDEFINED_COLOR : "+UNDEFINED_COLOR);
        System.out.println("PLAY_COLOR : "+PLAY_COLOR);
        System.out.println("listSquare : "+listSquare.size());
        for (int index = 0; index < listSquare.size(); index++) {
          System.out.println("Square #"+index+":"+listSquare.get(index).toString());
        }
    }

    public Symbol getSymbol(){
        return this.s;
    }
    public int getErrorCounter(){
        return this.errorCounter;
    }
     /*GET*/
    
public ListSquare getTypeSquare() {
      return typeSquare;
    }

    public String getName() {
      return name;
    }

    public int getRows() {
      return rows;
    }

    public int getCols() {
      return cols;
    }

    public int getPossY() {
      return possY;
    }

    public int getPossX() {
      return possX;
    }

    public String getBOX_COLOR() {
      return BOX_COLOR;
    }

    public String getBOX_ON_COLOR() {
      return BOX_ON_COLOR;
    }

    public String getTARGET_COLOR() {
      return TARGET_COLOR;
    }

    public String getBRICK_COLOR() {
      return BRICK_COLOR;
    }

    public String getHALL_COLOR() {
      return HALL_COLOR;
    }

    public String getUNDEFINED_COLOR() {
      return UNDEFINED_COLOR;
    }

    public String getPLAY_COLOR() {
      return PLAY_COLOR;
    }

    public ArrayList<Square> getListSquare() {
      return listSquare;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SicXML$actions {
  private final SicXML parser;

  /** Constructor */
  CUP$SicXML$actions(SicXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SicXML$do_action_part00000000(
    int                        CUP$SicXML$act_num,
    java_cup.runtime.lr_parser CUP$SicXML$parser,
    java.util.Stack            CUP$SicXML$stack,
    int                        CUP$SicXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SicXML$result;

      /* select the action based on the action number */
      switch (CUP$SicXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		RESULT = start_val;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SicXML$parser.done_parsing();
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= mundo_erro 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
map = true ; 
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mundo_erro ::= NT$0 INICIO_WORLDS accion FINAL_WORLDS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)).value;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("mundo_erro",11, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
map = false ; 
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mundo_erro ::= NT$1 INICIO_ERRORS errores_posibles FINAL_ERRORS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)).value;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("mundo_erro",11, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mundo_erro ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("mundo_erro",11, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // errores_posibles ::= INICIO_ERROR inidicacion_error FINAL_ERROR 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("errores_posibles",12, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // errores_posibles ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("errores_posibles",12, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inidicacion_error ::= 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("inidicacion_error",13, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;

    //prinFinal();
    
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accion ::= INICIO_WORLD datos_mapa FINAL_WORLD NT$2 accion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("accion",1, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-4)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // accion ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("accion",1, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datos_mapa ::= datos_mapa atributos 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("datos_mapa",2, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // datos_mapa ::= atributos 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("datos_mapa",2, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atributos ::= INICIO_NAME CARACTER FINAL_NAME 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		
    if (name == null) {
      name = a;
    }else{
      System.out.println("ya tiene un nombre");
    }
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atributos ::= INICIO_ROWS ENTERO FINAL_ROWS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
				
    if (rows==-1) {
      if (Integer.parseInt(a)>0) {
        rows = Integer.parseInt(a);
      } else {
        System.out.println("no puede ser menor a 0");
      }
    }else{
      System.out.println("rows no se puede usar dos veces");
    }
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atributos ::= INICIO_COLS ENTERO FINAL_COLS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
				
    if (cols==-1) {
      if (Integer.parseInt(a)>0) {
        cols = Integer.parseInt(a);
      } else {
        System.out.println("no puede ser menor a 0");
      }
    }else{
      System.out.println("cols no se puede usar dos veces");
    }
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributos ::= INICIO_CONFIG bucle_color FINAL_CONFIG 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributos ::= INICIO_BOARD tipo_poss_dar FINAL_BOARD 
            {
              Object RESULT =null;
		addSquare();
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.TARGET;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atributos ::= NT$3 INICIO_TARGETS solo_poss FINAL_TARGETS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)).value;
		addSquare();
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.PLAY;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atributos ::= NT$4 INICIO_PLAYER solo_poss FINAL_PLAYER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)).value;
		addSquare();
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.BOX;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atributos ::= NT$5 INICIO_BOXES solo_poss FINAL_BOXES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)).value;
		addSquare();
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-3)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atributos ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // solo_poss ::= solo_poss pos 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("solo_poss",10, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // solo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("solo_poss",10, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pos ::= INICIO_POSX ENTERO FINAL_POSX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		possX= Integer.parseInt(a);
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("pos",6, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pos ::= INICIO_POSY ENTERO FINAL_POSY 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		possY= Integer.parseInt(a);
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("pos",6, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pos ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("pos",6, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_poss_dar ::= tipo_poss_dar typo_poss 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("tipo_poss_dar",8, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_poss_dar ::= typo_poss 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("tipo_poss_dar",8, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typo_poss ::= pos 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("typo_poss",9, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typo_poss ::= INICIO_TYPE tipo_board FINAL_TYPE 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("typo_poss",9, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.HALL;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_board ::= NT$6 HALL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("tipo_board",7, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =null;
typeSquare = ListSquare.BRICK;
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_board ::= NT$7 BRICK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("tipo_board",7, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_board ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("tipo_board",7, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bucle_color ::= bucle_color color 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("bucle_color",5, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bucle_color ::= color 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("bucle_color",5, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // color ::= INICIO_BOX_COLOR COLOR FINAL_BOX_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(BOX_COLOR==null){BOX_COLOR = a;}else{System.out.println("Ya esta seleccionado BOX_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // color ::= INICIO_BOX_COLOR_ON COLOR FINAL_BOX_COLOR_ON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(BOX_ON_COLOR==null){BOX_ON_COLOR = a;}else{System.out.println("Ya esta seleccionado BOX_ON_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // color ::= INICIO_TARGET_COLOR COLOR FINAL_TARGET_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(TARGET_COLOR==null){TARGET_COLOR = a;}else{System.out.println("Ya esta seleccionado TARGET_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // color ::= INICIO_BRICK_COLOR COLOR FINAL_BRICK_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(BRICK_COLOR==null){BRICK_COLOR = a;}else{System.out.println("Ya esta seleccionado BRICK_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // color ::= INICIO_HALL_COLOR COLOR FINAL_HALL_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(HALL_COLOR==null){HALL_COLOR = a;}else{System.out.println("Ya esta seleccionado HALL_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // color ::= INICIO_UNDEFINED_COLOR COLOR FINAL_UNDEFINED_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(UNDEFINED_COLOR==null){UNDEFINED_COLOR = a;}else{System.out.println("Ya esta seleccionado UNDEFINED_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // color ::= INICIO_PLAYER_COLOR COLOR FINAL_PLAYER_COLOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SicXML$stack.elementAt(CUP$SicXML$top-1)).value;
		if(PLAY_COLOR==null){PLAY_COLOR = a;}else{System.out.println("Ya esta seleccionado PLAY_COLOR");}
              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.elementAt(CUP$SicXML$top-2)), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // color ::= error 
            {
              Object RESULT =null;

              CUP$SicXML$result = parser.getSymbolFactory().newSymbol("color",4, ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SicXML$stack.peek()), RESULT);
            }
          return CUP$SicXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SicXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SicXML$do_action(
    int                        CUP$SicXML$act_num,
    java_cup.runtime.lr_parser CUP$SicXML$parser,
    java.util.Stack            CUP$SicXML$stack,
    int                        CUP$SicXML$top)
    throws java.lang.Exception
    {
              return CUP$SicXML$do_action_part00000000(
                               CUP$SicXML$act_num,
                               CUP$SicXML$parser,
                               CUP$SicXML$stack,
                               CUP$SicXML$top);
    }
}

}
