// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexico.jflex

/*primer seccion: codigo java que se copiara arriba*/
package com.example.boxworld_sokoban.juego.JflexYCup.xml;

import java_cup.runtime.*;
import com.example.boxworld_sokoban.juego.JflexYCup.Token;

import java.util.ArrayList;
import java.util.List;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicoXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\1\1\2\1\0"+
    "\1\3\3\2\7\0\1\2\1\4\12\5\1\0\1\2"+
    "\1\6\1\0\1\7\1\10\1\2\1\11\1\12\1\13"+
    "\4\14\1\15\1\16\1\14\1\17\1\20\5\14\1\21"+
    "\5\14\1\22\1\23\1\14\1\0\1\2\1\0\1\2"+
    "\1\24\1\2\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\36\1\45\1\46\1\47\1\50\1\36"+
    "\1\51\1\52\1\53\1\36\1\0\1\1\1\0\1\2"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\5\1\1\4\1\0"+
    "\1\1\15\0\1\4\15\0\1\1\17\0\1\5\1\4"+
    "\1\6\16\0\1\7\20\0\1\10\1\4\17\0\1\7"+
    "\21\0\1\11\1\4\26\0\1\12\3\0\1\13\1\0"+
    "\1\14\1\15\1\16\1\0\1\17\2\0\1\4\5\0"+
    "\1\20\3\0\1\21\1\0\1\22\1\23\1\24\1\0"+
    "\1\25\2\0\1\26\2\0\1\27\2\0\1\30\5\0"+
    "\1\31\1\0\1\32\2\0\1\33\2\0\1\34\5\0"+
    "\1\35\4\0\1\36\1\37\1\0\1\40\4\0\1\41"+
    "\3\0\1\42\1\43\1\0\1\44\4\0\1\45\6\0"+
    "\1\46\7\0\1\47\17\0\1\50\6\0\1\51\10\0"+
    "\1\52\5\0\1\53\4\0\1\54\4\0\1\55\4\0"+
    "\1\56\1\57\2\0\1\60\1\61\12\0\1\62\1\0"+
    "\1\63\6\0\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u0478\0\u09cc\0\54\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\204\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\54\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\54\0\u11e0\0\u120c\0\u1238"+
    "\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398"+
    "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\54\0\u14cc"+
    "\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c"+
    "\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c"+
    "\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\54\0\u18c0"+
    "\0\u18ec\0\u1918\0\54\0\u1944\0\54\0\54\0\54\0\u1970"+
    "\0\54\0\u199c\0\u19c8\0\54\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u04d0\0\u1ad0\0\u1afc\0\u1b28\0\u04d0\0\u1b54\0\u04d0"+
    "\0\u04d0\0\u04d0\0\u1b80\0\u04d0\0\u1bac\0\u1bd8\0\54\0\u1c04"+
    "\0\u1c30\0\54\0\u1c5c\0\u1c88\0\54\0\u1cb4\0\u1ce0\0\u1d0c"+
    "\0\u1d38\0\u1d64\0\54\0\u1d90\0\u04d0\0\u1dbc\0\u1de8\0\u04d0"+
    "\0\u1e14\0\u1e40\0\u04d0\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c"+
    "\0\u04d0\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\54\0\54\0\u1ff8"+
    "\0\54\0\u2024\0\u2050\0\u207c\0\u20a8\0\54\0\u20d4\0\u2100"+
    "\0\u212c\0\u04d0\0\u04d0\0\u2158\0\u04d0\0\u2184\0\u21b0\0\u21dc"+
    "\0\u2208\0\u04d0\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310"+
    "\0\54\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444"+
    "\0\u04d0\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8"+
    "\0\54\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u04d0"+
    "\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940"+
    "\0\54\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u04d0\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\54\0\u2af8\0\u2b24\0\u2b50\0\u2b7c"+
    "\0\u04d0\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\54\0\54\0\u2c58"+
    "\0\u2c84\0\u04d0\0\u04d0\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60"+
    "\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\54\0\u2e68\0\u04d0"+
    "\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\54\0\u04d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\2\4"+
    "\1\2\1\10\2\2\1\11\6\2\1\12\27\13\55\0"+
    "\1\3\54\0\2\4\2\0\3\4\13\0\1\4\31\0"+
    "\2\4\1\0\1\14\3\4\13\14\1\4\27\14\5\0"+
    "\1\6\50\0\2\4\1\15\1\0\2\4\1\16\13\0"+
    "\1\4\1\0\1\17\1\20\1\0\1\21\2\0\1\22"+
    "\5\0\1\23\1\0\1\24\1\25\1\0\1\26\1\27"+
    "\1\30\23\0\1\31\43\0\1\32\44\0\2\4\2\0"+
    "\3\4\13\33\1\4\27\33\11\0\13\33\1\0\27\33"+
    "\5\0\1\34\3\0\13\34\1\0\27\34\4\35\1\36"+
    "\21\35\1\37\1\40\1\35\1\41\2\35\1\42\5\35"+
    "\1\43\1\35\1\44\1\45\1\35\1\46\1\47\1\50"+
    "\2\35\2\51\2\16\2\51\2\16\1\52\13\51\1\16"+
    "\27\51\43\0\1\53\1\0\1\54\51\0\1\55\55\0"+
    "\1\56\33\0\1\57\53\0\1\60\66\0\1\61\2\0"+
    "\1\62\53\0\1\63\35\0\1\64\25\0\1\65\42\0"+
    "\1\66\54\0\1\67\26\0\1\70\55\0\1\71\40\0"+
    "\1\72\3\0\13\72\1\0\27\72\5\0\1\73\3\0"+
    "\13\73\1\0\27\73\4\35\1\36\53\35\1\36\2\35"+
    "\1\74\50\35\1\36\36\35\1\75\1\35\1\76\12\35"+
    "\1\36\36\35\1\77\14\35\1\36\40\35\1\100\12\35"+
    "\1\36\20\35\1\101\32\35\1\36\20\35\1\102\32\35"+
    "\1\36\33\35\1\103\2\35\1\104\14\35\1\36\36\35"+
    "\1\105\14\35\1\36\20\35\1\106\25\35\1\107\4\35"+
    "\1\36\35\35\1\110\15\35\1\36\36\35\1\111\10\35"+
    "\10\51\1\112\45\51\2\16\2\51\1\16\1\113\1\52"+
    "\13\51\1\16\27\51\25\0\1\114\24\0\1\115\36\0"+
    "\1\116\56\0\1\117\1\0\1\120\56\0\1\121\46\0"+
    "\1\122\54\0\1\123\37\0\1\124\74\0\1\125\56\0"+
    "\1\126\47\0\1\127\52\0\1\130\37\0\1\131\70\0"+
    "\1\132\21\0\1\133\60\0\1\134\40\0\1\135\3\0"+
    "\13\135\1\0\27\135\4\35\1\36\20\35\1\136\24\35"+
    "\1\137\5\35\1\36\30\35\1\140\22\35\1\36\33\35"+
    "\1\141\1\35\1\142\15\35\1\36\40\35\1\143\12\35"+
    "\1\36\33\35\1\144\17\35\1\36\34\35\1\145\16\35"+
    "\1\36\20\35\1\146\32\35\1\36\41\35\1\147\11\35"+
    "\1\36\44\35\1\150\6\35\1\36\40\35\1\151\12\35"+
    "\1\36\37\35\1\152\13\35\1\36\23\35\1\153\27\35"+
    "\1\36\40\35\1\154\6\35\7\51\1\155\1\112\43\51"+
    "\45\0\1\156\32\0\1\157\4\0\1\160\51\0\1\161"+
    "\72\0\1\162\37\0\1\163\64\0\1\164\50\0\1\165"+
    "\44\0\1\166\75\0\1\167\22\0\1\170\1\171\76\0"+
    "\1\172\40\0\1\173\51\0\1\174\53\0\1\175\62\0"+
    "\1\176\32\0\1\177\41\0\1\200\3\0\13\200\1\0"+
    "\27\200\4\35\1\36\40\35\1\201\12\35\1\36\17\35"+
    "\1\202\4\35\1\203\26\35\1\36\22\35\1\204\30\35"+
    "\1\36\41\35\1\205\11\35\1\36\25\35\1\206\25\35"+
    "\1\36\36\35\1\207\14\35\1\36\33\35\1\210\17\35"+
    "\1\36\24\35\1\211\26\35\1\36\46\35\1\212\4\35"+
    "\1\36\15\35\1\213\1\214\34\35\1\36\41\35\1\215"+
    "\11\35\1\36\26\35\1\216\24\35\1\36\24\35\1\217"+
    "\26\35\1\36\24\35\1\220\26\35\1\36\33\35\1\221"+
    "\13\35\30\0\1\222\52\0\1\223\13\0\1\224\56\0"+
    "\1\225\44\0\1\226\23\0\1\227\101\0\1\230\63\0"+
    "\1\231\32\0\1\232\36\0\1\233\75\0\1\234\31\0"+
    "\1\235\53\0\1\236\53\0\1\237\75\0\1\240\31\0"+
    "\1\241\76\0\1\242\51\0\1\243\30\0\1\244\3\0"+
    "\13\244\1\0\27\244\4\35\1\36\23\35\1\245\27\35"+
    "\1\36\22\35\1\246\13\35\1\247\14\35\1\36\41\35"+
    "\1\250\11\35\1\36\32\35\1\251\20\35\1\36\2\35"+
    "\1\252\50\35\1\36\30\35\1\253\22\35\1\36\40\35"+
    "\1\254\12\35\1\36\17\35\1\255\33\35\1\36\2\35"+
    "\1\256\50\35\1\36\24\35\1\257\26\35\1\36\2\35"+
    "\1\260\50\35\1\36\2\35\1\261\50\35\1\36\2\35"+
    "\1\262\50\35\1\36\24\35\1\263\26\35\1\36\2\35"+
    "\1\264\50\35\1\36\25\35\1\265\25\35\1\36\23\35"+
    "\1\266\23\35\7\0\1\267\107\0\1\270\52\0\1\271"+
    "\20\0\1\272\70\0\1\273\62\0\1\274\27\0\1\275"+
    "\36\0\1\276\34\0\1\277\71\0\1\300\55\0\1\301"+
    "\41\0\1\302\25\0\1\303\36\0\1\304\5\0\4\35"+
    "\1\36\2\35\1\305\50\35\1\36\36\35\1\306\14\35"+
    "\1\36\35\35\1\307\15\35\1\36\2\35\1\310\50\35"+
    "\1\36\17\35\1\311\33\35\1\36\26\35\1\312\24\35"+
    "\1\36\2\35\1\313\36\35\1\314\11\35\1\36\22\35"+
    "\1\315\30\35\1\36\40\35\1\316\12\35\1\36\42\35"+
    "\1\317\10\35\1\36\30\35\1\320\22\35\1\36\2\35"+
    "\1\321\36\35\1\322\5\35\40\0\1\323\37\0\1\324"+
    "\56\0\1\325\33\0\1\326\53\0\1\327\107\0\1\330"+
    "\17\0\1\331\14\0\1\332\53\0\1\333\21\0\1\334"+
    "\47\0\1\335\20\0\1\336\44\0\4\35\1\36\33\35"+
    "\1\337\17\35\1\36\17\35\1\340\33\35\1\36\22\35"+
    "\1\341\30\35\1\36\2\35\1\342\50\35\1\36\2\35"+
    "\1\343\50\35\1\36\36\35\1\344\14\35\1\36\2\35"+
    "\1\345\14\35\1\346\33\35\1\36\17\35\1\347\21\35"+
    "\1\350\11\35\1\36\35\35\1\351\15\35\1\36\2\35"+
    "\1\352\44\35\43\0\1\353\57\0\1\354\47\0\1\355"+
    "\50\0\1\356\42\0\1\357\53\0\1\360\33\0\1\361"+
    "\75\0\1\362\22\0\4\35\1\36\36\35\1\363\14\35"+
    "\1\36\42\35\1\364\10\35\1\36\36\35\1\365\14\35"+
    "\1\36\33\35\1\366\17\35\1\36\22\35\1\367\30\35"+
    "\1\36\22\35\1\370\30\35\1\36\2\35\1\371\50\35"+
    "\1\36\24\35\1\372\22\35\45\0\1\373\33\0\1\374"+
    "\66\0\1\375\56\0\1\376\53\0\1\377\53\0\1\u0100"+
    "\40\0\1\u0101\23\0\4\35\1\36\40\35\1\u0102\12\35"+
    "\1\36\20\35\1\u0103\32\35\1\36\33\35\1\u0104\17\35"+
    "\1\36\36\35\1\u0105\14\35\1\36\36\35\1\u0106\14\35"+
    "\1\36\36\35\1\u0107\14\35\1\36\23\35\1\u0108\23\35"+
    "\7\0\1\u0109\111\0\1\u010a\51\0\1\u010b\55\0\1\u010c"+
    "\46\0\1\u010d\53\0\1\u010e\37\0\1\u010f\27\0\4\35"+
    "\1\36\2\35\1\u0110\50\35\1\36\40\35\1\u0111\12\35"+
    "\1\36\36\35\1\u0112\14\35\1\36\40\35\1\u0113\12\35"+
    "\1\36\33\35\1\u0114\17\35\1\36\33\35\1\u0115\17\35"+
    "\1\36\17\35\1\u0116\27\35\33\0\1\u0117\65\0\1\u0118"+
    "\15\0\1\u0119\107\0\1\u011a\53\0\1\u011b\37\0\1\u011c"+
    "\24\0\4\35\1\36\26\35\1\u011d\24\35\1\36\40\35"+
    "\1\u011e\12\35\1\36\2\35\1\u011f\50\35\1\36\36\35"+
    "\1\u0120\14\35\1\36\36\35\1\u0121\14\35\1\36\22\35"+
    "\1\u0122\24\35\31\0\1\u0123\31\0\1\u0124\111\0\1\u0125"+
    "\53\0\1\u0126\51\0\1\u0127\10\0\4\35\1\36\24\35"+
    "\1\u0128\26\35\1\36\2\35\1\u0129\50\35\1\36\40\35"+
    "\1\u012a\12\35\1\36\40\35\1\u012b\12\35\1\36\36\35"+
    "\1\u012c\10\35\47\0\1\u012d\13\0\1\u012e\53\0\1\u012f"+
    "\104\0\1\u0130\13\0\4\35\1\36\42\35\1\u0131\10\35"+
    "\1\36\2\35\1\u0132\50\35\1\36\2\35\1\u0133\50\35"+
    "\1\36\33\35\1\u0134\13\35\24\0\1\u0135\72\0\1\u0136"+
    "\10\0\4\35\1\36\17\35\1\u0137\33\35\1\36\36\35"+
    "\1\u0138\10\35\27\0\1\u0139\71\0\1\u013a\6\0\4\35"+
    "\1\36\22\35\1\u013b\30\35\1\36\40\35\1\u013c\6\35"+
    "\43\0\1\u013d\17\0\1\u013e\44\0\4\35\1\36\36\35"+
    "\1\u013f\14\35\1\36\2\35\1\u0140\44\35\40\0\1\u0141"+
    "\13\0\4\35\1\36\33\35\1\u0142\13\35\43\0\1\u0143"+
    "\10\0\4\35\1\36\36\35\1\u0144\10\35\45\0\1\u0145"+
    "\6\0\4\35\1\36\40\35\1\u0146\6\35\7\0\1\u0147"+
    "\44\0\4\35\1\36\2\35\1\u0148\44\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12188];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\0\1\1\15\0\1\1\15\0"+
    "\1\1\17\0\2\1\1\11\16\0\1\1\20\0\1\11"+
    "\1\1\17\0\1\11\21\0\1\11\1\1\26\0\1\11"+
    "\3\0\1\11\1\0\3\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\1\3\0\1\1\1\0\3\1\1\0\1\1"+
    "\2\0\1\11\2\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\5\0\1\1"+
    "\4\0\2\11\1\0\1\11\4\0\1\11\3\0\2\1"+
    "\1\0\1\1\4\0\1\1\6\0\1\11\7\0\1\1"+
    "\17\0\1\11\6\0\1\1\10\0\1\11\5\0\1\1"+
    "\4\0\1\11\4\0\1\1\4\0\2\11\2\0\2\1"+
    "\12\0\1\11\1\0\1\1\6\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private  List<Token> listComments =  new ArrayList<>();
        private String report = "";
        private void addComments(){
            listComments.add(new Token((yyline+1),(yycolumn+1),yytext()));
        }
        public List<Token> getListError(){
            return listComments;
        }
    private void print(String token){
        //report+="\n<linea:"+(yyline+1)+"><colum:"+(yycolumn+1)+"><TOKEN:"+yytext()+">";
    }
    public String getReport(){
        return this.report;
    }
    public void setReport(String repor){
        this.report = repor;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoXML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addComments();
            }
            // fall through
          case 54: break;
          case 2:
            { /*ESPACIOS*/
            }
            // fall through
          case 55: break;
          case 3:
            { print("{ENTERO}" );return new Symbol(sym.ENTERO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 56: break;
          case 4:
            { print(yytext() );return new Symbol(sym.COLOR,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 57: break;
          case 5:
            { print("{ID}" );return new Symbol(sym.CARACTER,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 58: break;
          case 6:
            { /*COMENTARIO*/
            }
            // fall through
          case 59: break;
          case 7:
            { /*INDICACIONES TECNICAS*/
            }
            // fall through
          case 60: break;
          case 8:
            { print("HALL"  );return new Symbol(sym.HALL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 61: break;
          case 9:
            { print("BRICK"  );return new Symbol(sym.BRICK,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 62: break;
          case 10:
            { print("cols"    );return new Symbol(sym.INICIO_COLS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 63: break;
          case 11:
            { print("name"    );return new Symbol(sym.INICIO_NAME ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 64: break;
          case 12:
            { print("posX"    );return new Symbol(sym.INICIO_POSX ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 65: break;
          case 13:
            { print("posY"    );return new Symbol(sym.INICIO_POSY ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 66: break;
          case 14:
            { print("rows"    );return new Symbol(sym.INICIO_ROWS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 67: break;
          case 15:
            { print("type"    );return new Symbol(sym.INICIO_TYPE ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 68: break;
          case 16:
            { print("FINAL_cols"     );return new Symbol(sym.FINAL_COLS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 69: break;
          case 17:
            { print("FINAL_name"     );return new Symbol(sym.FINAL_NAME  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 70: break;
          case 18:
            { print("FINAL_posX"     );return new Symbol(sym.FINAL_POSX  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 71: break;
          case 19:
            { print("FINAL_posY"     );return new Symbol(sym.FINAL_POSY  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 72: break;
          case 20:
            { print("FINAL_rows"     );return new Symbol(sym.FINAL_ROWS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 73: break;
          case 21:
            { print("FINAL_type"     );return new Symbol(sym.FINAL_TYPE  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 74: break;
          case 22:
            { print("board"    );return new Symbol(sym.INICIO_BOARD ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 75: break;
          case 23:
            { print("boxes"    );return new Symbol(sym.INICIO_BOXES ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 76: break;
          case 24:
            { print("error"    );return new Symbol(sym.INICIO_ERROR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 77: break;
          case 25:
            { print("world"    );return new Symbol(sym.INICIO_WORLD ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 78: break;
          case 26:
            { print("FINAL_board"     );return new Symbol(sym.FINAL_BOARD  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 79: break;
          case 27:
            { print("FINAL_boxes"     );return new Symbol(sym.FINAL_BOXES  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 80: break;
          case 28:
            { print("FINAL_error"     );return new Symbol(sym.FINAL_ERROR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 81: break;
          case 29:
            { print("FINAL_world"     );return new Symbol(sym.FINAL_WORLD  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 82: break;
          case 30:
            { print("config"    );return new Symbol(sym.INICIO_CONFIG ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 83: break;
          case 31:
            { print("errors"    );return new Symbol(sym.INICIO_ERRORS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 84: break;
          case 32:
            { print("player"    );return new Symbol(sym.INICIO_PLAYER ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 85: break;
          case 33:
            { print("worlds"    );return new Symbol(sym.INICIO_WORLDS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 86: break;
          case 34:
            { print("FINAL_config"     );return new Symbol(sym.FINAL_CONFIG  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 87: break;
          case 35:
            { print("FINAL_errors"     );return new Symbol(sym.FINAL_ERRORS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 88: break;
          case 36:
            { print("FINAL_player"     );return new Symbol(sym.FINAL_PLAYER  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 89: break;
          case 37:
            { print("FINAL_worlds"     );return new Symbol(sym.FINAL_WORLDS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 90: break;
          case 38:
            { print("targets"    );return new Symbol(sym.INICIO_TARGETS ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 91: break;
          case 39:
            { print("FINAL_targets"     );return new Symbol(sym.FINAL_TARGETS  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 92: break;
          case 40:
            { print("box_color"    );return new Symbol(sym.INICIO_BOX_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 93: break;
          case 41:
            { print("FINAL_box_color"     );return new Symbol(sym.FINAL_BOX_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 94: break;
          case 42:
            { print("hall_color"    );return new Symbol(sym.INICIO_HALL_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 95: break;
          case 43:
            { print("FINAL_hall_color"     );return new Symbol(sym.FINAL_HALL_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 96: break;
          case 44:
            { print("brick_color"    );return new Symbol(sym.INICIO_BRICK_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 97: break;
          case 45:
            { print("FINAL_brick_color"     );return new Symbol(sym.FINAL_BRICK_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 98: break;
          case 46:
            { print("player_color"    );return new Symbol(sym.INICIO_PLAYER_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 99: break;
          case 47:
            { print("target_color"    );return new Symbol(sym.INICIO_TARGET_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 100: break;
          case 48:
            { print("FINAL_player_color"     );return new Symbol(sym.FINAL_PLAYER_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 101: break;
          case 49:
            { print("FINAL_target_color"     );return new Symbol(sym.FINAL_TARGET_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 102: break;
          case 50:
            { print("undefined_color"    );return new Symbol(sym.INICIO_UNDEFINED_COLOR ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 103: break;
          case 51:
            { print("FINAL_undefined_color"     );return new Symbol(sym.FINAL_UNDEFINED_COLOR  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 104: break;
          case 52:
            { print("box_on_target_color"    );return new Symbol(sym.INICIO_BOX_COLOR_ON ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 105: break;
          case 53:
            { print("FINAL_box_on_target_color"     );return new Symbol(sym.FINAL_BOX_COLOR_ON  ,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
